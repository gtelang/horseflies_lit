

\subsection{Algorithmic Overview} \hspace{0.2cm}
In the super-drone family of strategies, we replace the fleet of drones with a single drone 
whose speed $\varphi^{*}$ is the sum of all the drone speeds. We then solve the classic horsefly problem
for the given initial horse position, set of sites and this super-drone speed $\varphi^{*}$
For the resulting order of sites obtained, we partition the sites among the drones; 
the order in which each drone serves \textit{its} assigned sites, is the same 
as the order in which they are served along the super-drone classic horsefly tour. 
Finally, we extract a tour for the horse from the above site partition. 

From this description, we see there are three ``axes of flexibility'' for algorithmic 
experiments. Each of these are encoded as policy functions that are passed in as arguments 
to the super-drone algorithm. We list them in the following table:

\begin{center}
\begin{tabular}{ l l }
  \textbf{\texttt{chf\_solver}} & Choice of solver for classic horsefly to get super-drone tour   \\
   \textbf{\texttt{partitioning\_scheme}} &  Partitioning scheme for the sites 
                                             among the drones once the horsefly 
                                             tour is obtained \\
  \textbf{\texttt{ohmf\_tour\_calculator\_given\_site\_partition}} & Calculation of good tours for the
                                             horse and flies a given site partition and ordering.   
\end{tabular}
\end{center}

\TODO{I will implement the \texttt{partitioning\_scheme} argument later. For getting a working version ready, 
things are already becomging too parameterzied for my tastes. right now, I will just parametrized along
the tour calculator functions to make sure they all follow the same interface. }




\subsection{Algorithm Details}




\newchunk The following fragment just encapsulates in code what was stated in the algorithmic
overview section. A point to note is that currying would be so useful here, so that policy 
functions can be passed in with the appropriate parameters gummed in. Python does have some 
functional programming features which provide this, I will use them here later. 

%{python-mode}%
@d Algorithms for multiple flies @{
@<Helper functions for \verb|algo_super_drone|@>
def algo_super_drone(sites, inithorseposn, phi, number_of_flies,
                     chf_solver                                = chf.algo_greedy_incremental_insertion,
                     partitioning_scheme                       = None
                     ohmf_tour_calculator_given_site_partition = None   ,
                     animate_schedule_p                        = True  ):
    
    ordered_sites = chf_solver(sites, inithorseposn, phi = number_of_flies*phi,      \
                               insertion_policy_name = "naive",                      \
                               post_optimizer = chf.algo_exact_given_specific_ordering )['site_ordering']

    ordered_sites_partition = chunkify(ordered_sites, max_group_size = number_of_flies)
    
    utils_algo.print_list(ordered_sites_partition)
    @<Calculate and return tour for horse and flies@>
@| algo_super_drone @}
%{/python-mode}%


\vspace{-0.8cm} \newchunk The \verb|chunkify| function simply groups successive elements in an array 
in groups of maximum size \verb|maxgroupsize|. For instance 
\verb|chunkify([1,2,3,4,5,6,7,8,9,10], max_group_size=4)| evaluates to \verb|[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]]|
%{python-mode}%
@d Helper functions for \verb|algo_super_drone| @{ 
def chunkify(xs, max_group_size):

    import math

    pxs = []
    for i in range(int(math.ceil(float(len(xs))/float(max_group_size)))):
       pxs.append(xs[i*max_group_size:(i+1)*max_group_size])
    
    return pxs
@| chunkify @}
%{/python-mode}%


\vspace{-0.8cm} \newchunk Now that the sites have been partitioned, we begin the most interesting
part of the calculation: calculating the tour for the horse and flies. There are several possible 
approaches. Here I will try out just one simple heuristic that does not involve any waiting, while also 
guaranteeing polygonal paths for each of the horse and flies. This heuristic also directly generalizes
\verb|collinear_horseflies|. In essence, it keeps heading towards the drone that it can rendezvous with at 
the earliest. The rest of the drones keep heading towards the meeting point of the truck and this drone 
It should certainly be enough for a good visual demonstration that ``seems'' locally optimal. 

%{python-mode}%
@d Local data-structures @{   
class FlyArc: 
      def __init__(self, fly_position, site, service_status):
           self.fly_trail     = [fly_position]
           self.assigned_site = site
           self.serviced_p    = service_status
@| @}
%{/python-mode}%



%{python-mode}%
@d Calculate and return tour for horse and flies @{
@<Write schedule to disk and return answer@>
@| @}
%{/python-mode}%

\newchunk  Now that the schedule has been computed we write it to disk, and then 
read it back for the purposes of animation (if the \verb|animate_schedule_p|) flag 
has been set. 

How do we represent a generic multiple flies tour? The representation is more involved than classic
horsefly, since the flies meet up with the horse at various times, and each of the fly paths 
can contain one or more turn points. I will just store the paths of the horse and flies explicitly, 
with an identifier within the flies tours whether a given point is a turn point, rendezvous point or 
a site. This would be a perfect place for an algebraic data-type. 

%{python-mode}%
@d Write schedule to disk and return answer 
@{
return ohmf_tour
@| @}
%{/python-mode}%

This algorithm can also be generalized to neighborhoods, and should be used for a demo, 
but after following oop principles. Do we really need the super-drone heuristic? Why not 
calculate the thing on the fly. 

%    # Chunkify successsive sites along the tour
%    # Iterate through the chunks making the normal drones service each chunk
%    #     Each chunk is treated as a reverse-horsefly problem
%    #            There are multiple strategies for solving reverse-horsefly. 
%    #            Simplest strategy, is to head for closest non-picked up drone
%    #            Another one, is that all drones first head for the center of the meb
%    #                          and then head together towards the horse. This strategy
%    #                          is good, when processing drones is costly. For this 
%    #                          the velocity needs to be adjusted accordingly, at each stage. 
%    #                          this is a natural generalization of collinear-horseflies
%    #                          A natural optimization question here, is that of orienting 
%    #                          the direction of the horse to rendezvous with all the flies. 
%    #                          how bad is just heading for the center of mass, or the 
%    #                          center of the minimum enclosing ball? That helps in implementation
%    #                          of various calculus expressions. This fits the pattern of setup 
%    #                          a calculation and solve. Will be nice to know if we can approximate
%    #                          this with the L1 metric, and how much worse off OPT is for this 
%    #                          strategy compared to opt for multiple horseflies. 
%    #     At the end of each chunk, update the horse position and process the next-chunk

##################################################################################


if write_io_p:
    



    #print Fore.GREEN, "Horse Trajectory is ", Style.RESET_ALL
    #utils_algo.print_list(horse_traj)
    #for i in range(number_of_flies):
    #       print "Trajectory of Fly", i
    #       utils_algo.print_list(flystates[i].get_trajectory())
    #       print "----------------------------------------------"
    fig, ax =  plt.subplots()
    ax.set_xlim([utils_graphics.xlim[0], utils_graphics.xlim[1]])
    ax.set_ylim([utils_graphics.ylim[0], utils_graphics.ylim[1]])
    ax.set_aspect(1.0)
    ax.set_xticks([])
    ax.set_yticks([])
  
    # Plot the fly trajectories
    # Place graphical elements in reverse order,
    # i.e. from answer, all the way upto question. 
    colors = utils_graphics.get_colors(number_of_flies)
    for i in range(number_of_flies):
       print i
       xfs = [pt['coordinates'][0] for pt in flystates[i].get_trajectory()]
       yfs = [pt['coordinates'][1] for pt in flystates[i].get_trajectory()]
       ax.plot(xfs,yfs, '-', linewidth=1.0, color=colors[i])
  
    # Plot the horse trajectory
    xhs = [ pt[0] for pt in horse_traj  ]
    yhs = [ pt[1] for pt in horse_traj  ]
    ax.plot(xhs,yhs, 'ro-',linewidth=3.0)

    # Plot sites
    xsites = [site[0] for site in sites]
    ysites = [site[1] for site in sites]
    ax.plot(xsites, ysites, 'bo')

    # Plot initial horseposition
    ax.plot([inithorseposn[0]], [inithorseposn[1]], 'ks', markersize=10.0)
    plt.show()
