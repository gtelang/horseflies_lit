@s 
\chapter{One Horse, Multiple Flies}
\label{chap:one-horse-multiple-flies}

\section{Module Overview}
If one fly wasn't exciting enough for you, how about multiple flies?! The added complexity
in the problem comes from finding which sites need to be serviced by each of the flies 
\textit{and} the order in which these sites need to be serviced. To play around with the 
algorithms in interactive mode, run \texttt{main.py} as 

\begin{center}
\texttt{python main.py --problem-one-horse-multiple-flies}. 
\end{center}

The structure of this chapter is similar to \autoref{chap:classic-horsefly}. In fact, 
we will be using some of the algorithms from that chapter as black-box routines in 
the algorithms to be described here. 


All algorithms to solve the multiple flies 
\footnote{For the rest of this chapter we will refer to the one horse, 
multiple flies problem simply as the multiple flies problem.} 
problem have been implemented in \texttt{problem\_one\_horse\_multiple\_flies.py}. 
As bfore, the \verb|run_handler| function acts as a kind of main function for this module. 
It is called from \verb|main.py| to process the command-line arguments and run the 
experimental or interactive sections of the code. 

%{python-mode}%
@O ../src/lib/problem_one_horse_multiple_flies.py -cp
@{    
@< Relevant imports  @>
@< Set up logging information relevant to this module @>
def run_handler():
    @< Define key-press handler  @>
    @< Set up interactive canvas @>

@< Local data-structures  @>
@% @< Local utility functions  @>
@< Algorithms for multiple flies @>
@% @< Lower bounds for multiple flies  @>
@< Plotting routines  @>
@< Animation routines  @>
@| @}
%{/python-mode}%


\newpage

\section{Module Details}
\newchunk 
%{python-mode}%
@d Relevant imports 
@{from colorama import Fore, Style
from matplotlib import rc
from scipy.optimize import minimize
from sklearn.cluster import KMeans
import argparse
import inspect 
import itertools
import logging
import math
import matplotlib as mpl
import matplotlib.pyplot as plt
#plt.style.use('seaborn-poster')
import numpy as np
import os
import pprint as pp
import randomcolor 
import sys
import time
import utils_algo
import utils_graphics

import problem_classic_horsefly as chf
@| @}
%{/python-mode}%


\vspace{-0.8cm}\newchunk The logger variable becomes becomes global in scope to this module. This allows
me to write customized \texttt{debug} and \texttt{info} functions that let's me format 
the log messages according to the frame level. I learned this trick from the following 
Stack Overflow post \url{https://stackoverflow.com/a/5500099/505306}. 
%{python-mode}%
@d  Set up logging information relevant to this module 
@{logger=logging.getLogger(__name__)
logging.basicConfig(level=logging.DEBUG)

def debug(msg):
    frame,filename,line_number,function_name,lines,index=inspect.getouterframes(
        inspect.currentframe())[1]
    line=lines[0]
    indentation_level=line.find(line.lstrip())
    logger.debug('{i} [{m}]'.format(
        i='.'*indentation_level, m=msg))

def info(msg):
    frame,filename,line_number,function_name,lines,index=inspect.getouterframes(
        inspect.currentframe())[1]
    line=lines[0]
    indentation_level=line.find(line.lstrip())
    logger.info('{i} [{m}]'.format(
        i='.'*indentation_level, m=msg))
@| @}
%{/python-mode}%

\vspace{-0.8cm}\newchunk The key-press handler function detects the keys pressed by the user when the canvas
is in active focus. This function allows you to set some of the input parameters like 
speed ratio $\varphi$, or selecting an algorithm interactively at the command-line, 
generating a bunch of uniform or non-uniformly distributed points on the canvas, 
or just plain clearing the canvas for inserting a fresh input set of points. 

%{python-mode}%
@d Define key-press handler
@{   
# The key-stack argument is mutable! I am using this hack to my advantage.
def wrapperkeyPressHandler(fig,ax, run): 
       def _keyPressHandler(event):
           if event.key in ['i', 'I']:  
                @< Start entering input from the command-line @>
           elif event.key in ['n', 'N', 'u', 'U']: 
                @< Generate a bunch of uniform or non-uniform random points on the canvas @>
           elif event.key in ['c', 'C']: 
                @< Clear canvas and states of all objects @>
       return _keyPressHandler
@| wrapperkeyPressHandler @}
%{/python-mode}%



\vspace{-0.8cm}\newchunk Before running an algorithm, the user needs to select through 
a menu displayed at the terminal, which one to run. Each algorithm itself, may be 
run under different conditions, so depending on the key-pressed(and thus algorithm chosen) 
further sub-menus will be generated at the command-line. 

After running the appropriate algorithm, we render the structure computed to a matplotlib canvas/window
along with possibly some meta data about the run at the terminal. 

%{python-mode}%

@D Start entering input from the command-line
@{@<Set speed and number of flies@>
@<Select algorithm to execute@>
@| @}
%{/python-mode}%


\vspace{-0.8cm} \newchunk We assume that all flies have the same velocity
%{python-mode}%
@d Set speed and number of flies 
@{
phi_str = raw_input(Fore.YELLOW + "What should I set the speed of each of the flies to be (should be >1)? : " + Style.RESET_ALL)
nof_str = raw_input(Fore.YELLOW + "How many flies do you want me to assign to the horse? : " + Style.RESET_ALL)

phi = float(phi_str)
nof = int(nof_str)
@| @}
%{/python-mode}%



\vspace{-0.8cm} \newchunk Each of the algorithms can have several tuning strategies. 
Depending on the algorithm selected, further sub-menus will have to be generated for 
selecting these sub-strategies. It is best, if all these strategies, are all set 
through a configuration file, like say YAML, rather than have to generate the menus. 

What configurations are valid or not will have to be set later. However, for now, I 
will only implement a simple menu ala classic horsefly to get something working. 
For now, I am implementing the super-drone heuristic with the greedy-incremental 
strategy for the super-drone. For the super-drone category, we will also have 
to specify a partitioning scheme of which sites get assigned to which drones. 

Also the post-optimizer for the super-drone will have to be specified. Too....many....flags! 
Needs a careful documenting in terms of tables of what is allowed and what is not allowed
that is available for ready-reference for the user, and hopefully one that is updated
automatically when the combination is made. Maybe this can be useful for the defense.  

For now, we just stick to super-drones

%{python-mode}%
@d Select algorithm to execute @{
algo_str = raw_input(Fore.YELLOW                                             +\
        "Enter algorithm to be used to compute the tour:\n Options are:\n"   +\
        " (ec)   Earliest Capture \n"                                        +\
        Style.RESET_ALL)

algo_str = algo_str.lstrip()
 
# Incase there are patches present from the previous clustering, just clear them
utils_graphics.clearAxPolygonPatches(ax)

if   algo_str == 'ec':
      tour = run.getTour( algo_greedy_earliest_capture, phi, \
                          number_of_flies = nof)
else:
      print "Unknown option. No horsefly for you! ;-D "
      sys.exit()

utils_graphics.applyAxCorrection(ax)
plot_tour(ax, tour)
fig.canvas.draw()
@| @}
%{/python-mode}%

\vspace{-0.8cm}\newchunk This chunk generates points uniformly or non-uniformly distributed in the 
unit square $[0,1]^2$ in the Matplotlib canvas. I will document the schemes used for 
generating the non-uniformly distributed points later. These schemes are important to test the effectiveness of 
the horsefly algorithms. Uniform point clouds do no highlight the weaknesses of 
sequencing algorithms as David Johnson implies in his article on how to write 
experimental algorithm papers when he talks about algorithms for the TSP. 

Note that the option keys \verb|'n'| or \verb|'N'| for entering in non-uniform random-points is just 
incase the caps-lock key has been pressed on by the user accidentally. Similarly for the \verb|'u'|
and \verb|'U'| keys.  

%{python-mode}%
@D  Generate a bunch of uniform or non-uniform random points on the canvas
@{numpts = int(raw_input("\n" + Fore.YELLOW+\
                       "How many points should I generate?: "+\
                       Style.RESET_ALL)) 
run.clearAllStates()
ax.cla()
               
utils_graphics.applyAxCorrection(ax)
ax.set_xticks([])
ax.set_yticks([])
                
fig.texts = []
                 
import scipy
if event.key in ['n', 'N']: 
        run.sites = utils_algo.bunch_of_non_uniform_random_points(numpts)
else : 
        run.sites = scipy.rand(numpts,2).tolist()

patchSize  = (utils_graphics.xlim[1]-utils_graphics.xlim[0])/140.0

for site in run.sites:      
    ax.add_patch(mpl.patches.Circle(site, radius = patchSize, \
                 facecolor='blue',edgecolor='black' ))

ax.set_title('Points : ' + str(len(run.sites)), fontdict={'fontsize':40})
fig.canvas.draw()
@| @}
%{/python-mode}%

\vspace{-0.8cm}\newchunk Clearing the canvas and states of all objects is essential when we want to test out the algorithm on a fresh
new point-set; the program need not be shut-down and rerun. 
%{python-mode}%
@D Clear canvas and states of all objects
@{run.clearAllStates()
ax.cla()
              
utils_graphics.applyAxCorrection(ax)
ax.set_xticks([])
ax.set_yticks([])
                 
fig.texts = []
fig.canvas.draw()
@| @}
%{/python-mode}%

%{python-mode}%
\vspace{-0.8cm}\newchunk 
@D Set up interactive canvas
@{fig, ax =  plt.subplots()
run = MultipleFliesInput()
#print run
    
ax.set_xlim([utils_graphics.xlim[0], utils_graphics.xlim[1]])
ax.set_ylim([utils_graphics.ylim[0], utils_graphics.ylim[1]])
ax.set_aspect(1.0)
ax.set_xticks([])
ax.set_yticks([])
      
mouseClick   = utils_graphics.wrapperEnterRunPoints (fig,ax, run)
fig.canvas.mpl_connect('button_press_event' , mouseClick )
      
keyPress     = wrapperkeyPressHandler(fig,ax, run)
fig.canvas.mpl_connect('key_press_event', keyPress   )
plt.show()
@| @}
%{/python-mode}%

\needspace{7cm}
\section{Local Data Structures}


\newchunk This class manages the input and the output of the result of 
calling various horsefly algorithms. 

%{python-mode}%
@d Local data-structures 
@{class MultipleFliesInput:
      def __init__(self, sites=[], inithorseposn=()):
           self.sites           = sites
           self.inithorseposn   = inithorseposn

      @<Methods for \verb|MultipleFliesInput|@>
@| HorseFlyInput @}
%{/python-mode}%






\vspace{-0.8cm}
\newchunk Set the sites to an empty list and initial horse position to the empty tuple.
%{python-mode}%
@D Methods for \verb|MultipleFliesInput|
@{def clearAllStates (self):
   self.sites = []
   self.inithorseposn = ()
@| clearAllStates @}
%{/python-mode}%


\vspace{-0.8cm} \newchunk 
This method sets an algorithm for calculating
a multiple flies tour. The name of the algorithm is passed as a command-line argument.  
The list of possible algorithms are typically prefixed with \verb|algo_|. 
          
%{python-mode}%
@D Methods for \verb|MultipleFliesInput|
@{def getTour(self, algo, speedratio, number_of_flies):
      return algo(self.sites, self.inithorseposn, speedratio, number_of_flies)
@| getTour @}
%{/python-mode}%

@i problem-one-horse-multiple-flies/algo-greedy-earliest-capture.web

\newpage
\section{Plotting Routines}
\newchunk When an algorithm returns the computed tour, plot that tour upon the provided axis object. 
This is good for quick interactive testing of algorithms, where you can immediately see the output of various
algorithms on the canvas. 
%{python-mode}%
@d Plotting routines @{
def plot_tour(ax, tour):

    sites            = tour['sites']
    inithorseposn    = tour['inithorseposn']
    phi              = tour['phi']
    horse_trajectory = tour['horse_trajectory']
    fly_trajectories = tour['fly_trajectories']

    xhs = [ horse_trajectory[i][0][0] for i in range(len(horse_trajectory))]    
    yhs = [ horse_trajectory[i][0][1] for i in range(len(horse_trajectory))]    

    number_of_flies = len(fly_trajectories)
    colors          = utils_graphics.get_colors(number_of_flies, lightness=0.4)

    ax.cla()
    utils_graphics.applyAxCorrection(ax)
    ax.set_xticks([])
    ax.set_yticks([])

    # Plot fly trajectories
    xfss = [[point['coordinates'][0] for point in fly_trajectories[i]] for i in range(len(fly_trajectories))]
    yfss = [[point['coordinates'][1] for point in fly_trajectories[i]] for i in range(len(fly_trajectories))]
 
    for xfs, yfs,i in zip(xfss,yfss,range(number_of_flies)):
        ax.plot(xfs,yfs,color=colors[i], alpha=0.7)

    # Plot sites along each flys tour
    xfsitess = [ [point['coordinates'][0] for point in fly_trajectories[i] if point['type'] == 'site'] 
                for i in range(len(fly_trajectories))]
    yfsitess = [ [point['coordinates'][1] for point in fly_trajectories[i] if point['type'] == 'site'] 
                for i in range(len(fly_trajectories))]
    
    for xfsites, yfsites, i in zip(xfsitess, yfsitess, range(number_of_flies)):
        for xsite, ysite, j in zip(xfsites, yfsites, range(len(xfsites))):
              ax.add_patch(mpl.patches.Circle((xsite,ysite), radius = 1.0/140, \
                                              facecolor=colors[i], edgecolor='black'))
              ax.text(xsite, ysite, str(j+1), horizontalalignment='center', 
                                              verticalalignment='center'  , 
                                              bbox=dict(facecolor=colors[i], alpha=1.0)) 
    # Plot horse tour
    ax.plot(xhs,yhs,'o-',markersize=5.0, linewidth=2.5, color='#D13131') 
    
    # Plot initial horseposn 
    ax.add_patch( mpl.patches.Circle( inithorseposn,radius = 1.0/100,
                                    facecolor= '#D13131', edgecolor='black'))

@| @}
%{/python-mode}%

\section{Animation routines}

It is even more important to animate a multiple horseflies tour than for classic horsefly
since it will yield greater geometric understanding of the heuristics implemented. With multiple
flies the final result is just a mess of lines, with the final horse and flies tours together
resembling a kindergarterner's immitation of a Jackson Pollock painting. 

Here are the goal for the animation

\begin{itemize}
\item The path of the horse is rendered in a bold shade of red. 
\item Unserviced sites are marked by black dots
\item Each drone is assigned a color for its trajectory. The trajectory 
      lines are all polygonal curves and are rendered with a somewhat transparent shade 
      of its assigned color
\item Serviced sites have a face-color which is the same assigned to the drone that served it. 
      The face-colors are delibertely chosen using the HSV or HSL colorschemes; the colors 
      chosen are on the brighter side. 
\end{itemize}

Ideally, I would like the animation to look like as if all the black dots (the circles) are
disappearing one-by-one. Further one can also see which site was serviced by which drone. 

A feature you might also want to add, is that at a key-press, you can focus only on the 
tours of the horse and a particular fly along with the ordering chosen for that fly. 
Thus for instance pressing ``a 4 12'' would animate the motion of drones 4 and 12, if there 
are say 20 drones being used. Similarly, ``p 4 12'' would just plot the tour of the 4th 12th
drone. i.e. we just specify a list of indices after ``a'' or ``p''. If one of the numbers in the 
list is more than the number of drones, then we bleep a message at the command-line terminal
to enter the corrected drone list again. 

Now that the plan has been outlined, it is time to get down the nitty-gritties of the
implementation. 

\newchunk 
%{python-mode}%
@d Animation routines @{   
def animate_tour (sites, inithorseposn, phi, horse_trajectory, fly_trajectories, animation_file_name_prefix):
    import numpy as np
    import matplotlib.animation as animation
    from   matplotlib.patches import Circle
    import matplotlib.pyplot as plt 

    @<Set up configurations and parameters for all necessary graphics@>
    @<Parse trajectory information and convert trajectory representation to leg list form @>
    @<Construct and store every frame of the animation in the \verb|ims| array@>
    @<Write animation of tour to disk and display in live window@>
@| @}
%{/python-mode}%


\vspace{-0.8cm} \newchunk It is important that we have a background grid (both a major and a minor) one for tracking the motion of the horse and drones to get a rough sense of 
estimation of the distances involved while looking at the motion. Since multiple drones are used 
I set up a \verb|colors| array containig the rgb values of colors that are chromatically distinct
when viewed against a white canvas. 
%{python-mode}%
@D Set up configurations and parameters for all necessary graphics @{   
plt.rc('text', usetex=True)
plt.rc('font', family='serif')

fig, ax = plt.subplots()
ax.set_xlim([0,1])
ax.set_ylim([0,1])
ax.set_aspect('equal')

ax.set_xticks(np.arange(0, 1, 0.1))
ax.set_yticks(np.arange(0, 1, 0.1))

# Turn on the minor TICKS, which are required for the minor GRID
ax.minorticks_on()

# customize the major grid
ax.grid(which='major', linestyle='--', linewidth='0.3', color='red')

# Customize the minor grid
ax.grid(which='minor', linestyle=':', linewidth='0.3', color='black')

ax.get_xaxis().set_ticklabels([])
ax.get_yaxis().set_ticklabels([])

# Visually distinct colors for displaying each flys trajectory in a different color 
number_of_flies = len(fly_trajectories)
colors          = utils_graphics.get_colors(number_of_flies, lightness=0.5)

ax.set_title("Number of sites: " + str(len(sites)), fontsize=25)
ax.set_xlabel(r"$\varphi=$ " + str(phi) + "\nNumber of drones: " + str(number_of_flies), fontsize=20)
@| @}
%{/python-mode}%


\vspace{-0.8cm} \newchunk For the purposes of animation it is most convenient to represent
a trajectory not as a list of points, but as a list of ``legs''. In the case of the horse
a leg is simply a single straight line segment joining two consecutive points on the tour. 

For the fly a leg is either a single segment joining two successive points on the tour 
of type \verb|genpt| or two successive segments whose vertices are respectively of type
\verb|genpt|, \verb|site| and \verb|genpt|. \TODO{Insert diagram for representing what a leg is}

To make the programming convenient, we will enforce the condition that all fly trajectories
flies have the same number of legs as that of the horse's by padding \verb|None|
elements at the end of each fly trajectory's ``leg-list'' representation. Legs of type 
\verb|None| on a fly's trajectory indicate that the fly has been retired and hence has 
stopped moving. 

The leg list version of the horse and fly trajectories are respectively named 
\verb|horse_traj_ll| and \verb|fly_trajs_ll|. 

Note that the segment corresponding to each horse-leg also stores the index of the fly
it meets up with at the head of the corresponding segment vector. 

%{python-mode}%
@d Parse trajectory information and convert trajectory representation to leg list form @{ 
# Leg list form for all horse trajectories
horse_traj_ll = []
for i in range(len(horse_trajectory)-1):
    horse_traj_ll.append((horse_trajectory[i][0], horse_trajectory[i+1][0], 
                          horse_trajectory[i+1][1]))

# Leg list form for all fly trajectories
fly_trajs_ll = []
for fly_traj in fly_trajectories:
    fly_traj_ll = []
    for i in range(len(fly_traj)-1):
        if fly_traj[i]['type'] == 'gen_pt':
 
             if fly_traj[i+1]['type'] == 'gen_pt':
                  fly_traj_ll.append((fly_traj[i], 
                                      fly_traj[i+1]))
                  
    
             elif fly_traj[i+1]['type'] == 'site':
                  fly_traj_ll.append((fly_traj[i], \
                                      fly_traj[i+1], \
                                      fly_traj[i+2]))
    fly_trajs_ll.append(fly_traj_ll)

num_horse_legs = len(horse_traj_ll)

# Append empty legs to fly trajectories so that leg counts 
# for all fly trajectories are the same as that of the horse
# trajectory
for fly_traj in fly_trajs_ll:
    m = len(fly_traj)
    empty_legs = [None for i in range(num_horse_legs-len(fly_traj))]
    fly_traj.extend(empty_legs)

@| @}
%{/python-mode}%


\vspace{-0.8cm} \newchunk
%{python-mode}%
@D  Construct and store every frame of the animation in the \verb|ims| array @{   
@<Define discretization function for a leg of the horse or fly tour@>
ims                = []
horse_points_so_far = []
fly_points_so_far   = [[] for i in range(number_of_flies)] 
fly_sites_so_far    = [[] for i in range(number_of_flies)] # each list is definitely a sublist of corresponding list in fly_points_so_far
for idx in range(len(horse_traj_ll)):
    # Get current horse-leg and update the list of points covered so far by the horse
    horse_leg = (horse_traj_ll[idx][0], horse_traj_ll[idx][1])
    horse_points_so_far.append(horse_leg[0]) # attach the beginning point of the horse leg
    horse_leg_pts = horse_leg
    #utils_algo.print_list(horse_points_so_far)
    #print "....................................................."

    fly_legs  = [fly_trajs_ll[i][idx] for i in range(len(fly_trajs_ll)) ]
    fly_legs_pts  = []
    for fly_leg, i in zip(fly_legs, range(len(fly_legs))):
       if fly_leg != None:
            coods = []
            for pt in fly_leg:
                 coods.append(pt['coordinates'])
            fly_legs_pts.append(coods)
            fly_points_so_far[i].append(coods[0]) # attaching the beginning point of the leg. Extension only 
                                                  # happens for legs wqhich are not of type None, meshing well 
                                                  # with the fact that fly has stopped moving. 
       else:
            fly_legs_pts.append(None)

    # discretize current leg, for horse and fly, and for each point in the discretization
    # render the frame. If a fly crosses a site, update the fly_points_so_far list
    horse_leg_disc = discretize_leg(horse_leg_pts)   # list of points 
    fly_legs_disc  = map(discretize_leg, fly_legs_pts) # list of list of points 

    # Each iteration of the following loop tacks on a new frame to ims
    # this outer level for loop is just proceeding through each position
    # in the discretized horse legs. This is the motion which coordinates
    # the flys motions
    for k in range(len(horse_leg_disc['points'])):
        current_horse_posn = horse_leg_disc['points'][k]
        current_fly_posns  = []  # updated in the for loop below.
        for j in range(len(fly_legs_disc)):
              if fly_legs_disc[j] != None:
                    current_fly_posns.append(fly_legs_disc[j]['points'][k])

                    if fly_legs_disc[j]['legtype'] == 'gsg' and k==9: # yay, we just hit a site!
                          fly_points_so_far[j].append(fly_legs_disc[j]['points'][k])
                          fly_sites_so_far[j].append(fly_legs_disc[j]['points'][k])
              else: 
                    current_fly_posns.append(None)
        objs = []
        # Plot sites as black circles
        for site in sites:
             circle = Circle((site[0], site[1]), 0.01, \
                              facecolor = 'k'   , \
                              edgecolor = 'black'     , \
                              linewidth=1.0)
             sitepatch = ax.add_patch(circle)
             objs.append(sitepatch)

        # Plot trajectory of flies 
        assert(len(fly_points_so_far) == number_of_flies)
        for ptraj, i in zip(fly_points_so_far, range(number_of_flies)):
             print current_fly_posns[i]
             if current_fly_posns[i] is None:
                   xfs = [pt[0] for pt in ptraj]
                   yfs = [pt[1] for pt in ptraj] 
    
             else:
                   xfs = [pt[0] for pt in ptraj] + [current_fly_posns[i][0]]
                   yfs = [pt[1] for pt in ptraj] + [current_fly_posns[i][1]]

             flyline, = ax.plot(xfs, yfs, '-', linewidth=2.5, alpha=0.30, color=colors[i])
             flyloc   = Circle((xfs[-1], yfs[-1]), 0.01, facecolor = colors[i], alpha=0.7)
             flypatch = ax.add_patch(flyloc)
             objs.append(flypatch)
             objs.append(flyline)

        # Plot currently covered sites as colored circles
        for sitelist, i in zip(fly_sites_so_far, range(number_of_flies)):
           for site in sitelist:
                 circle = Circle((site[0], site[1]), 0.015, \
                                  facecolor = colors[i]   , \
                                  edgecolor = 'black'     , \
                                  linewidth=1.0)
                 sitepatch = ax.add_patch(circle)
                 objs.append(sitepatch)

        # Plot trajectory of horse
        xhs = [pt[0] for pt in horse_points_so_far] + [current_horse_posn[0]]
        yhs = [pt[1] for pt in horse_points_so_far] + [current_horse_posn[1]]
        horseline, = ax.plot(xhs,yhs,'-',linewidth=5.0, markersize=6, alpha=1.00, color='#D13131')
        horseloc   = Circle((current_horse_posn[0], current_horse_posn[1]), 0.01, facecolor = '#D13131', alpha=1.00)
        horsepatch = ax.add_patch(horseloc)
        objs.append(horsepatch)
        objs.append(horseline)

        debug(Fore.CYAN + "Appending to ims "+ Style.RESET_ALL)
        ims.append(objs) # [::-1] means reverse the list
@| @}
%{/python-mode}%




\vspace{-0.8cm} \newchunk This function just places a fixed number of points along each segment
of a leg for both the horse and flies. This causes the horse and flies to move slowly along 
short segments and faster on longer segments. To make the animation more uniform, you might 
actually want to place the discretization points along the leg segments by a scheme of dividing 
the length of the longest segment by the shortest segment, and then taking a multiple of 
the answer's floor. For multiple flies, I would then take the greatest common divisor of these
numbers and place points every so often along them. 

But this scheme will take more time ti implement and not worth the extra work for now. 
 
%{python-mode}%
@d Define discretization function for a leg of the horse or fly tour @{
def discretize_leg(pts):
    subleg_pts = []

    if pts == None:
         return None
    else:
         numpts = len(pts)

         if numpts == 2:   # horse leg or fly-leg of type gg
             k  = 19 
             legtype = 'gg'
         elif numpts == 3: # fly leg of type gsg 
             k  = 10 
             legtype = 'gsg'

         pts = map(np.asarray, pts)
         for p,q in zip(pts, pts[1:]):
             tmp = []
             for t in np.linspace(0,1,k): 
                   tmp.append((1-t)*p + t*q) 
             subleg_pts.extend(tmp[:-1])

         subleg_pts.append(pts[-1])
         return {'points': subleg_pts, 
                 'legtype'  : legtype}
@| @}
%{/python-mode}%



\vspace{-0.8cm} \newchunk It is important that I save the the animation to disk before 
I render the animation into a live window. If I do \verb|plt.show()| first, then after closing 
the live-window the animation does not seem to get saved to disk and everything just hangs. 

Not sure if this is only an Ubuntu thing. For the purposes of experiments, you just need to 
comment the \verb|plt.show()| line, at the end of the block. 
%{python-mode}%
@d Write animation of tour to disk and display in live window @{   
from colorama import Back 

debug(Fore.BLACK + Back.WHITE + "\nStarted constructing ani object"+ Style.RESET_ALL)
ani = animation.ArtistAnimation(fig, ims, interval=50, blit=True, repeat_delay=1000)
debug(Fore.BLACK + Back.WHITE + "\nFinished constructing ani object"+ Style.RESET_ALL)

print "Mike testing, mike testing"
#debug(Fore.MAGENTA + "\nStarted writing animation to disk"+ Style.RESET_ALL)
#ani.save(animation_file_name_prefix+'.avi', dpi=250)
#debug(Fore.MAGENTA + "\nFinished writing animation to disk"+ Style.RESET_ALL)

plt.show() # For displaying the animation in a live window. 
@| @}
%{/python-mode}%

\newpage
@i problem-one-horse-multiple-flies/experiment-fall-of-tour-length-with-increasing-drones.web

\newpage
\section{Chapter Index of Fragments}
@m
\section{Chapter Index of Identifiers}
@u 
%------------------------------------------------------
@S
%------------------------------------------------------
\newpage
