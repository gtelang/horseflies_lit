\chapter{Some (Boring) Utility Functions}
\label{chap:utility-functions}

We will be needing some utility functions, for drawing and manipulating data-structures 
which will be implemented in files separate from \verb|problem_classic_horsefly.py|.  All such
files will be prefixed with the work \verb|utils_|. Many of the important common utility 
functions are defined here; others will be defined on the fly throughout the rest of the report. 
This chapter just collects the most important of the functions for the sake of clarity of exposition
in the later chapters. 

\section{Graphical Utilities}

Here We will  develop routines to interactively insert points onto a Matplotlib canvas and clear the canvas. 
Almost all variants of the horsefly problem will involve mousing in sites and the initial position of the horse 
and fly. These points will typically be represented by small circular patches. The type of the point
will be indicated by its color and size e.g. intial position of truck and drone 
will typically be represented by a large red dot while and the sites by smaller blue dots. 

Matplotlib has extensive support for inserting such circular patches onto its canvas with 
mouse-clicks. Each such graphical canvas corresponds (roughly) to Matplotlib figure
object instance. Each figure consists of several Axes objects which contains
most of the figure elements i.e. the Axes objects correspond to the ``drawing area''
of the canvas. 

\newchunk First we set up the axes limits, dimensions and other configuration quantities
which will correspond to the ``without loss of generality'' assumptions made in the 
statements of the horsefly problems. We also need to set up the axes limits,
dimensions, and other fluff. The following fragment defines a function which 
``normalizes'' a drawing area by setting up the x and y limits and making the 
aspect ratio of the axes object the same i.e. 1.0. Since Matplotlib is principally
a plotting software, this is not the default behavior, since scales on the x and y 
axes are adjusted according to the data to be plotted. 

@O ../src/lib/utils_graphics.py -cp
@{
xlim, ylim = [0,1], [0,1]

def applyAxCorrection(ax):
      ax.set_xlim([xlim[0], xlim[1]])
      ax.set_ylim([ylim[0], ylim[1]])
      ax.set_aspect(1.0)
@}

\newchunk Next, given an axes object (i.e. a drawing area on a figure object) we need a function
to delete and remove all the graphical objects drawn on it. 

@O ../src/lib/utils_graphics.py -cp
@{
def clearPatches(ax):
    # Get indices cooresponding to the polygon patches
    for index , patch in zip(range(len(ax.patches)), ax.patches):
        if isinstance(patch, mpl.patches.Polygon) == True:
            patch.remove()

    # Remove line patches. These get inserted during the r=2 case,
    # For some strange reason matplotlib does not consider line objects
    # as patches.
    ax.lines[:]=[]

    #pp.pprint (ax.patches) # To verify that none of the patches are
    # polyon patches corresponding to clusters.
    applyAxCorrection(ax)
@}

\newchunk Now remove the patches which were rendered for each cluster
    Unfortunately, this step has to be done manually, the canvas patch
    of a cluster and the corresponding object in memory are not reactively
    connected.I presume, this behavioue can be achieved by sub-classing.

@O ../src/lib/utils_graphics.py -cp
@{
def clearAxPolygonPatches(ax):

    # Get indices cooresponding to the polygon patches
    for index , patch in zip(range(len(ax.patches)), ax.patches):
        if isinstance(patch, mpl.patches.Polygon) == True:
            patch.remove()

    # Remove line patches. These get inserted during the r=2 case,
    # For some strange reason matplotlib does not consider line objects
    # as patches.
    ax.lines[:]=[]

    # To verify that none of the patches 
    # are polyon patches corresponding 
    # to clusters.
    #pp.pprint (ax.patches) 
    applyAxCorrection(ax)
@}

\newchunk Now for one of the most important routines for drawing on the canvas! 
To insert the sites, we double-click the left mouse button and to insert the 
initial position of the horse and fly we double-click the right mouse-button. 

Note that the left mouse-button corresponds to button 1 and right mouse button
to button 3 in the code-fragment below. 

@O ../src/lib/utils_graphics.py -cp
@{
## Also modify to enter initial position of horse and fly
def wrapperEnterRunPoints(fig, ax, run):
    """ Create a closure for the mouseClick event.
    """
    def _enterPoints(event):
        if event.name     == 'button_press_event'      and \
           (event.button   == 1 or event.button == 3)  and \
           event.dblclick == True                      and \
           event.xdata    != None                      and \
           event.ydata    != None:

             if event.button == 1:        
               newPoint = (event.xdata, event.ydata)
               run.sites.append( newPoint  )
               patchSize  = (xlim[1]-xlim[0])/140.0
   
               ax.add_patch( mpl.patches.Circle( newPoint,
                                              radius = patchSize,
                                              facecolor='blue',
                                              edgecolor='black'   )  )
               ax.set_title('Points Inserted: ' + str(len(run.sites)), \
                             fontdict={'fontsize':40})


             if event.button == 3:        
                 inithorseposn = (event.xdata, event.ydata)
                 run.inithorseposn = inithorseposn  
                 patchSize  = (xlim[1]-xlim[0])/70.0

                 # TODO: remove the previous red patches, 
                 # which containg ht eold position
                 # of the horse and fly. Doing this is 
                 # slightly painful, hence keeping it
                 # for later
                 ax.add_patch( mpl.patches.Circle( inithorseposn,
                                                   radius = patchSize,
                                                   facecolor= '#D13131', #'red',
                                                   edgecolor='black'   )  )
                 
             # It is inefficient to clear the polygon patches inside the
             # enterpoints loop as done here.
             # I have just done this for simplicity: the intended behaviour
             # at any rate, is
             # to clear all the polygon patches from the axes object,
             # once the user starts entering in MORE POINTS TO THE CLOUD
             # for which the clustering was just computed and rendered.
             # The moment the user starts entering new points,
             # the previous polygon patches are garbage collected. 
             clearAxPolygonPatches(ax)
             applyAxCorrection(ax)
             fig.canvas.draw()

    return _enterPoints
@|  @}



\section{Algorithmic Utilities}

\newchunk Given a list of  points $[p_0,p_1,p_2,....p_{n-1}]$. 
    the following function returns, $[p_1-p_0, p_2-p_1,...,p_{n-1}-p_{n-2}]$
    i.e. it converts the list of points into a consecutive list of numpy vectors. 
    Points should be lists or tuples of length 2

@O ../src/lib/utils_algo.py -cp
@{
import numpy as np
import random
from colorama import Fore
from colorama import Style


def vector_chain_from_point_list(pts):
    """ Given a list of points [p0,p1,p2,....p(n-1)]
    Make it into a list of numpy vectors 
    [p1-p0, p2-p1,...,p(n-1)-p(n-2)]
    
    Points should be lists or tuples of length 2
    """
    vec_chain = []
    for pair in zip(pts, pts[1:]):
        tail= np.array (pair[0])
        head= np.array (pair[1])
        vec_chain.append(head-tail)

    return vec_chain
@}


\newchunk Given a polygonal chain, an important computation is to calculate 
its length. Typically used for computing the length of the horse's and fly's tours. 

@O ../src/lib/utils_algo.py -cp
@{
def length_polygonal_chain(pts):
    """ Given a list of points [p0,p1,p2,....p(n-1)]
    calculate the length of its segments. 

    Points should be lists or tuples of length 2

    If no points or just one point is given in the list of
    points, then 0 is returned.
    """
    vec_chain = vector_chain_from_point_list(pts)

    acc = 0
    for vec in vec_chain:
        acc = acc + np.linalg.norm(vec)
    return acc
@}

\newchunk The following routine is useful on long lists returned from external solvers. 
Often point-data is given to and returned from these external routines in flattened
form. The following routines are needed to convert such a ``flattened'' list into 
a list of points and vice versa. 

@O ../src/lib/utils_algo.py -cp
@{
def pointify_vector (x):
    """ Convert a vector of even length 
    into a vector of points. i.e.
    [x0,x1,x2,...x2n] -> [[x0,x1],[x2,x3],,..[x2n-1,x2n]]
    """
    if len(x) % 2 == 0:
        pts = []
        for i in range(len(x))[::2]:
            pts.append( [x[i],x[i+1]] )
        return pts
    else :
        sys.exit('List of items does not have an even length to be able to be pointifyed')

def flatten_list_of_lists(l):
    """ Flatten vector
      e.g.  [[0,1],[2,3],[4,5]] -> [0,1,2,3,4,5]
    """
    return [item for sublist in l for item in sublist]

@}

\newchunk Python's default print function prints each list on a single line. For 
debugging purposes,  it helps to print a list with one item per line. 

@O ../src/lib/utils_algo.py -cp
@{
def print_list(xs):
    """ Print each item of a list on new line
    """
    for x in xs:
        print x
@}

\newchunk The following routines are self-explanatory and are hence gathered into one chunk. 

@O ../src/lib/utils_algo.py -cp
@{
def partial_sums( xs ):
    """
    List of partial sums
    [4,2,3] -> [4,6,9]
    """
    psum = 0
    acc = []
    for x in xs:
        psum = psum+x
        acc.append( psum )

    return acc

def are_site_orderings_equal(sites1, sites2):
    """
    For two given lists of points test if they are 
    equal or not. We do this by checking the Linfinity
    norm.
    """
    
    for (x1,y1), (x2,y2) in zip(sites1, sites2): 
        if (x1-x2)**2 + (y1-y2)**2 > 1e-8:

            print Fore.BLUE+ "Site Orderings are not equal"
            print sites1
            print sites2
            print '-------------------------' + Style.RESET_ALL
            return False

    return True
        
    print "\n\n\n\n---------------------"


def bunch_of_random_points(numpts):
    cluster_size = int(np.sqrt(numpts)) 
    numcenters   = cluster_size
    
    import scipy
    import random
    centers = scipy.rand(numcenters,2).tolist()

    scale = 4.0
    points = []
    for c in centers:
        cx = c[0]
        cy = c[1]

        sq_size      = min(cx,1-cx,cy, 1-cy)
        cluster_size = int(np.sqrt(numpts)) 
        loc_pts_x    = np.random.uniform(low=cx-sq_size/scale, 
                                         high=cx+sq_size/scale, 
                                         size=(cluster_size,))
        loc_pts_y    = np.random.uniform(low=cy-sq_size/scale, 
                                         high=cy+sq_size/scale, 
                                         size=(cluster_size,))

        points.extend(zip(loc_pts_x, loc_pts_y))

    num_remaining_pts = numpts - cluster_size * numcenters

    remaining_pts = scipy.rand(num_remaining_pts, 2).tolist()
    points.extend(remaining_pts)
    
    return points

@}


