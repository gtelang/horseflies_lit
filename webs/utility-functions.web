\chapter{Some (Boring) Utility Functions}
\label{chap:utility-functions}

We will be needing some utility functions, for drawing and manipulating data-structures 
which will be implemented in files separate from \verb|problem_classic_horsefly.py|.  All such
files will be prefixed with the work \verb|utils_|. Many of the important common utility 
functions are defined here; others will be defined on the fly throughout the rest of the report. 
This chapter just collects the most important of the functions for the sake of clarity of exposition
in the later chapters. 

\section{Graphical Utilities}

Here we will  develop routines to interactively insert points onto a Matplotlib canvas and clear the canvas. 
Almost all variants of the horsefly problem will involve mousing in sites and the initial position of the horse 
and fly. These points will typically be represented by small circular patches. The type of the point
will be indicated by its color and size e.g. intial position of truck and drone 
will typically be represented by a large red dot while and the sites by smaller blue dots. 

Matplotlib has extensive support for inserting such circular patches onto its canvas with 
mouse-clicks. Each such graphical canvas corresponds (roughly) to Matplotlib figure
object instance. Each figure consists of several Axes objects which contains
most of the figure elements i.e. the Axes objects correspond to the ``drawing area''
of the canvas. 

\newchunk First we set up the axes limits, dimensions and other configuration quantities
which will correspond to the ``without loss of generality'' assumptions made in the 
statements of the horsefly problems. We also need to set up the axes limits,
dimensions, and other fluff. The following fragment defines a function which 
``normalizes'' a drawing area by setting up the x and y limits and making the 
aspect ratio of the axes object the same i.e. 1.0. Since Matplotlib is principally
a plotting software, this is not the default behavior, since scales on the x and y 
axes are adjusted according to the data to be plotted. 

%{python-mode}%
@O ../src/lib/utils_graphics.py -cp
@{

from matplotlib import rc
from colorama import Fore
from colorama import Style
from scipy.optimize import minimize
from sklearn.cluster import KMeans
import argparse
import itertools
import math
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import os
import pprint as pp
import randomcolor 
import sys
import time

xlim, ylim = [0,1], [0,1]

def applyAxCorrection(ax):
      ax.set_xlim([xlim[0], xlim[1]])
      ax.set_ylim([ylim[0], ylim[1]])
      ax.set_aspect(1.0)
@}
%{/python-mode}%
\vspace{-0.8cm}
\newchunk Next, given an axes object (i.e. a drawing area on a figure object) we need a function
to delete and remove all the graphical objects drawn on it. 

%{python-mode}%
@O ../src/lib/utils_graphics.py -cp
@{
def clearPatches(ax):
    # Get indices cooresponding to the polygon patches
    for index , patch in zip(range(len(ax.patches)), ax.patches):
        if isinstance(patch, mpl.patches.Polygon) == True:
            patch.remove()
    ax.lines[:]=[]
    applyAxCorrection(ax)
@}

%{/python-mode}%

\vspace{-0.8cm}
\newchunk Now remove the patches which were rendered for each cluster
    Unfortunately, this step has to be done manually, the canvas patch
    of a cluster and the corresponding object in memory are not reactively
    connected.I presume, this behavioue can be achieved by sub-classing.

%{python-mode}%
@O ../src/lib/utils_graphics.py -cp
@{
def clearAxPolygonPatches(ax):

    # Get indices cooresponding to the polygon patches
    for index , patch in zip(range(len(ax.patches)), ax.patches):
        if isinstance(patch, mpl.patches.Polygon) == True:
            patch.remove()
    ax.lines[:]=[]
    applyAxCorrection(ax)
@}

%{/python-mode}%
\newchunk Now for one of the most important routines for drawing on the canvas! 
To insert the sites, we double-click the left mouse button and to insert the 
initial position of the horse and fly we double-click the right mouse-button. 

The following chunk defines a function that creates a closure for a mouseclick 
even on the matplotlib canvas. 

Note that the left mouse-button corresponds to button 1 and right mouse button
to button 3 in the code-fragment below. 

\TODO{Remove the previous red patches, 
which contain the old position
of the horse and fly. Doing this is 
slightly painful, hence keeping it
for later.}

%{python-mode}%
@O ../src/lib/utils_graphics.py -cp
@{def wrapperEnterRunPoints(fig, ax, run):
    def _enterPoints(event):
        if event.name      == 'button_press_event'          and \
           (event.button   == 1 or event.button == 3)       and \
            event.dblclick == True and event.xdata  != None and event.ydata  != None:

             if event.button == 1:  
                 @<Insert blue circle representing a site@>

             elif event.button == 3:  
                 @<Insert big red circle representing initial position of horse and fly@>

             @< Clear polygon patches and set up last minute \verb|ax| tweaks  @>

    return _enterPoints
@|  @}

%{/python-mode}%

\vspace{-0.8cm} \newchunk
%{python-mode}%
@d Insert blue circle representing a site @{  
newPoint = (event.xdata, event.ydata)
run.sites.append( newPoint  )
patchSize  = (xlim[1]-xlim[0])/140.0
   
ax.add_patch( mpl.patches.Circle( newPoint, radius = patchSize,
                                  facecolor='blue', edgecolor='black'  ))
ax.set_title('Points Inserted: ' + str(len(run.sites)), \
             fontdict={'fontsize':40})
@| @}
%{/python-mode}%

\vspace{-0.8cm} \newchunk
%{python-mode}%
@d Insert big red circle representing initial position of horse and fly @{ 
inithorseposn     = (event.xdata, event.ydata)
run.inithorseposn = inithorseposn  
patchSize         = (xlim[1]-xlim[0])/100.0

ax.add_patch( mpl.patches.Circle( inithorseposn,radius = patchSize,
                                  facecolor= '#D13131', edgecolor='black' ))
@| @}
%{/python-mode}%



\vspace{-0.8cm} \newchunk   
 It is inefficient to clear the polygon patches \textit{inside} the
 \verb|enterRunpoints| event loop as done here. However, this has just been done for 
 simplicity: the intended behaviour at any rate, is to clear all the polygon patches \
 from the axes object, once the user starts entering in more points to the cloud
 for which the clustering was just computed and rendered. The moment the user starts 
 entering new points, the previous polygon patches are garbage collected. 

%{python-mode}%
@d Clear polygon patches and set up last minute \verb|ax| tweaks @{   
clearAxPolygonPatches(ax)
applyAxCorrection(ax)
fig.canvas.draw()
@| @}
%{/python-mode}%



\newchunk  We also need a function to generate a specified number of visually distinct colors, especially
when dealing with  multiple flies. 

%{python-mode}%
@O ../src/lib/utils_graphics.py -cp @{
# Borrowed from https://stackoverflow.com/a/9701141
import numpy as np
import colorsys

def get_colors(num_colors, lightness=0.2):
    colors=[]
    for i in np.arange(60., 360., 300. / num_colors):
        hue        = i/360.0
        saturation = 0.95
        colors.append(colorsys.hls_to_rgb(hue, lightness, saturation))
    return colors
@|  @}
%{/python-mode}%


\section{Algorithmic Utilities}

\newchunk Given a list of  points $[p_0,p_1,p_2,....p_{n-1}]$. 
    the following function returns, $[p_1-p_0, p_2-p_1,...,p_{n-1}-p_{n-2}]$
    i.e. it converts the list of points into a consecutive list of numpy vectors. 
    Points should be lists or tuples of length 2

%{python-mode}%
@O ../src/lib/utils_algo.py -cp
@{
import numpy as np
import random
from colorama import Fore
from colorama import Style


def vector_chain_from_point_list(pts):
    vec_chain = []
    for pair in zip(pts, pts[1:]):
        tail= np.array (pair[0])
        head= np.array (pair[1])
        vec_chain.append(head-tail)

    return vec_chain
@}

%{/python-mode}%

\newchunk Given a polygonal chain in the form of successive points  $[p_0,p_1,p_2,....p_{n-1}]$, 
an important computation is to calculate its length. Points should be lists or tuples of length 2
If no points or just one point is given in the list of points, then 0 is returned.

Typically used for computing the length of the horse's and fly's tours. 

%{python-mode}%
@O ../src/lib/utils_algo.py -cp
@{
def length_polygonal_chain(pts):
    vec_chain = vector_chain_from_point_list(pts)

    acc = 0
    for vec in vec_chain:
        acc = acc + np.linalg.norm(vec)
    return acc
@}

%{/python-mode}%
\newchunk The following routine is useful on long lists returned from external solvers. 
Often point-data is given to and returned from these external routines in flattened
form. The following routines are needed to convert such a ``flattened'' list into 
a list of points and vice versa. 

Convert a vector of even length into a vector of points. i.e. 
$[x_0,x_1,x_2,...x_{2n}] \rarr [[x_0,x_1],[x_2,x_3],,..[x_{2n-1},x_{2n}]]$


%{python-mode}%
@o ../src/lib/utils_algo.py -cp
@{def pointify_vector (x):
    if len(x) % 2 == 0:
        pts = []
        for i in range(len(x))[::2]:
            pts.append( [x[i],x[i+1]] )
        return pts
    else :
        sys.exit('List of items does not have an even length to be able to be pointifyed')
@}

%{/python-mode}%

\vspace{-0.8cm}
The next chunk peforms the opposite process i.e. it flatten's the vector
e.g. $[[0,1],[2,3],[4,5]] \rarr [0,1,2,3,4,5]$


%{python-mode}%
@o ../src/lib/utils_algo.py -cp
@{def flatten_list_of_lists(l):
       return [item for sublist in l for item in sublist]
@}

%{/python-mode}%

\vspace{-0.8cm}
\newchunk Python's default print function prints each list on a single line. For 
debugging purposes,  it helps to print a list with one item per line. 

%{python-mode}%
@O ../src/lib/utils_algo.py -cp
@{def print_list(xs):
    for x in xs:
        print x
@}
%{/python-mode}%

\vspace{-0.8cm}
\newchunk This chunk just calculates the list of partial sums e.g. $[4,2,3] \rarr [4,6,9]"$
%{python-mode}%
@O ../src/lib/utils_algo.py -cp
@{def partial_sums( xs ):
    psum = 0
    acc = []
    for x in xs:
        psum = psum+x
        acc.append( psum )
    return acc
@}
%{/python-mode}%

\vspace{-0.8cm}
\newchunk For two given lists of points test if they are 
equal or not. We do this by checking the $L^{\infty}$ norm.
%{python-mode}%
@o ../src/lib/utils_algo.py -cp
@{def are_site_orderings_equal(sites1, sites2):

    for (x1,y1), (x2,y2) in zip(sites1, sites2): 
        if (x1-x2)**2 + (y1-y2)**2 > 1e-8:
            return False
    return True
@}
%{/python-mode}%

\vspace{-0.8cm} \newchunk This function just generates a bunch of non-uniformly distributed
random points inside the unit-square. According to this scheme, you will often notice
clusters clumped near the border of the unit-square. 
%{python-mode}%
@O ../src/lib/utils_algo.py -cp
@{def bunch_of_non_uniform_random_points(numpts):
    cluster_size = int(np.sqrt(numpts)) 
    numcenters   = cluster_size
    
    import scipy
    import random
    centers = scipy.rand(numcenters,2).tolist()

    scale, points = 4.0, []
    for c in centers:
        cx, cy = c[0], c[1]
        @<For current center $c$ of this loop, generate \verb|cluster_size| points uniformly in a square centered at it@>

    @<Whatever number of points are left to be generated, generate them uniformly inside the unit-square@>

    return points
@| scale, cluster_size @}
%{/python-mode}%



\vspace{-0.8cm} \newchunk Note that the smaller square around a center, inside which the points are generated is made to lie 
in the unit-square. This is reflected in the assignment to \verb|sq_size| below. 
%{python-mode}%
@d For current center $c$ of this loop, generate \verb|cluster_size| points uniformly in a square centered at it @{   
sq_size      = min(cx,1-cx,cy, 1-cy)
loc_pts_x    = np.random.uniform(low=cx-sq_size/scale, high=cx+sq_size/scale, size=(cluster_size,))
loc_pts_y    = np.random.uniform(low=cy-sq_size/scale, high=cy+sq_size/scale, size=(cluster_size,))
points.extend(zip(loc_pts_x, loc_pts_y))
@| @}
%{/python-mode}%


\vspace{-0.8cm} \newchunk
%{python-mode}%
@d Whatever number of points are left to be generated, generate them uniformly inside the unit-square @{   
num_remaining_pts = numpts - cluster_size * numcenters
remaining_pts = scipy.rand(num_remaining_pts, 2).tolist()
points.extend(remaining_pts)
@| @}
%{/python-mode}%



\newchunk This is the main serialization function to write out data to YAML files for later analyses of algorithm 
runs. 
%{python-mode}%
@O ../src/lib/utils_algo.py -cp @{    
def write_to_yaml_file(data, dir_name, file_name):
   import yaml
   with open(dir_name + '/' + file_name, 'w') as outfile:
     yaml.dump( data, outfile, default_flow_style = False)
@|  @}
%{/python-mode}%