%---------------------------------------------------------
% Every module is a chapter. Thus we keep the links 
% internal. Any labelling to other modules is done 
% manually. Nuweb provides the @s....@S sectioning 
% commands for this. See Nuweb manual
% http://nuweb.sourceforge.net/nuweb.pdf
% Personally, the important thing for me is not 
% the usage of the identifiers which can be discovered
% with gtags, or just plain simply while reading the book
% from which module (i.e. chapter) the identifier 
% came from. There is no replacement for gtags
% or doxygen like source-code navigation manuals. 
% But then again, usage lists are important within a module. 
% I would like to understand how identifiers are used 
% within modules, rather than how it uses external 
% modules which I can very well also discover using 
% gtags software or possibly doxygen. 
% In this case, my sections are at the problem level 
% because each problem corresponds to a module. 
% Every model is conceptually different, so there is 
% virtually no overlap, between them. Thus we introduce
% sections at the module level and *not* at the algorithm
% An important part of software engineering is engineering
% such loose (actually super-loose) decoupling between 
% software elements, that allows you to maintain the 
% software and pinpoint bugs effectively. 
% I would say, that it helps to document the internal
% wiring of a module rather than what is exported
% I doubt how that is scalable though. If you want to see
% how another module uses an identifier, you should use gtags. 
% and do the navigation. Thus, identifiers will be used for 
% local wiring. I think it is a good approximate solution. 
% Thus, use @s...@S at the modulelevel. 
%----------------------------------------------------------
@s 
\chapter{Classic Horsefly}
\label{chap:classic-horsefly}

\section{Module Overview}

\newchunk 
All algorithms to solve the classic horsefly problems have been implemented in 
\verb|problem_classic_horsefly.py|. The \verb|run_handler| function acts 
as a kind of main function for this module. It is called from 
\verb|main.py| to process the command-line arguments and run the 
experimental or interactive sections of the code. 

@O ../src/lib/problem_classic_horsefly.py -cp
@{    
@< Relevant imports for classic horsefly @>
@< Set up logging information relevant to this module @>
def run_handler():
    @< Define key-press handler  @>
    @< Set up interactive canvas @>

@< Local data-structures for classic horsefly @>
@< Local utility functions for classic horsefly @>
@< Algorithms for classic horsefly @>
@< Plotting routines for classic horsefly @>
@< Animation routines for classic horsefly @>
@| @}

\section{Module Details}

\newchunk 
@D Relevant imports for classic horsefly
@{
from matplotlib import rc
from colorama import Fore
from colorama import Style
from scipy.optimize import minimize
from sklearn.cluster import KMeans
import argparse
import inspect 
import itertools
import logging
import math
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import os
import pprint as pp
import randomcolor 
import sys
import time
import utils_algo
import utils_graphics
@| @}
\vspace{-0.8cm}\newchunk The logger variable becomes becomes global in scope to this module. This allows
me to write customized \texttt{debug} and \texttt{info} functions that let's me format 
the log messages according to the frame level. I learned this trick from the following 
Stack Overflow post \url{https://stackoverflow.com/a/5500099/505306}. 

@d  Set up logging information relevant to this module 
@{logger=logging.getLogger(__name__)
logging.basicConfig(level=logging.DEBUG)

def debug(msg):
    frame,filename,line_number,function_name,lines,index=inspect.getouterframes(
        inspect.currentframe())[1]
    line=lines[0]
    indentation_level=line.find(line.lstrip())
    logger.debug('{i} [{m}]'.format(
        i='.'*indentation_level, m=msg))

def info(msg):
    frame,filename,line_number,function_name,lines,index=inspect.getouterframes(
        inspect.currentframe())[1]
    line=lines[0]
    indentation_level=line.find(line.lstrip())
    logger.info('{i} [{m}]'.format(
        i='.'*indentation_level, m=msg))
@| @}

\vspace{-0.8cm}\newchunk The key-press handler function detects the keys pressed by the user when the canvas
is in active focus. This function allows you to set some of the input parameters like 
speed ratio $\varphi$, or selecting an algorithm interactively at the command-line, 
generating a bunch of uniform or non-uniformly distributed points on the canvas, 
or just plain clearing the canvas for inserting a fresh input set of points. 

@d Define key-press handler
@{   
# The key-stack argument is mutable! I am using this hack to my advantage.
def wrapperkeyPressHandler(fig,ax, run): 
       def _keyPressHandler(event):
           if event.key in ['i', 'I']:  
                @< Start entering input from the command-line @>
           elif event.key in ['n', 'N', 'u', 'U']: 
                @< Generate a bunch of uniform or non-uniform random points on the canvas @>
           elif event.key in ['c', 'C']: 
                @< Clear canvas and states of all objects @>
       return _keyPressHandler
@| wrapperkeyPressHandler @}

\vspace{-0.8cm}\newchunk 
@D Start entering input from the command-line
@{phi_str = raw_input(Fore.YELLOW + \
          "Enter speed of fly (should be >1): " +\
           Style.RESET_ALL)
phi = float(phi_str)

algo_str = raw_input(Fore.YELLOW + \
          "Enter algorithm to be used to compute the tour:\n Options are:\n" +\
        "  (e)   Exact \n"                                   +\
        "  (t)   TSP   \n"                                   +\
        "  (tl)  TSP   (using approximate L1 ordering)\n"    +\
        "  (k)   k2-center   \n"                             +\
        "  (kl)  k2-center (using approximate L1 ordering)\n"  +\
        "  (g)   Greedy\n"                                   +\
        "  (gl)  Greedy (using approximate L1 ordering])\n"  +\
        "  (ginc) Greedy Incremental  "  +\
        Style.RESET_ALL)

algo_str = algo_str.lstrip()

# Incase there are patches present from the previous clustering, just clear them
utils_graphics.clearAxPolygonPatches(ax)

if   algo_str == 'e':
      horseflytour = \
             run.getTour( algo_dumb,
                          phi )
elif algo_str == 'k': 
      horseflytour = \
             run.getTour( algo_kmeans,
                          phi,
                          k=2,
                          post_optimizer=algo_exact_given_specific_ordering)
      print " "
      print Fore.GREEN, answer['tour_points'], Style.RESET_ALL
elif algo_str == 'kl':
      horseflytour = \
             run.getTour( algo_kmeans,
                          phi,
                          k=2,
                          post_optimizer=algo_approximate_L1_given_specific_ordering)
elif algo_str == 't':
      horseflytour = \
             run.getTour( algo_tsp_ordering,
                          phi,
                          post_optimizer=algo_exact_given_specific_ordering)
elif algo_str == 'tl':
      horseflytour = \
             run.getTour( algo_tsp_ordering,
                          phi,
                          post_optimizer= algo_approximate_L1_given_specific_ordering)
elif algo_str == 'g':
      horseflytour = \
             run.getTour( algo_greedy,
                          phi,
                          post_optimizer= algo_exact_given_specific_ordering)
elif algo_str == 'gl':
      horseflytour = \
             run.getTour( algo_greedy,
                          phi,
                          post_optimizer= algo_approximate_L1_given_specific_ordering)
                          
elif algo_str == 'ginc':
      horseflytour = \
             run.getTour( algo_greedy_incremental_insertion,
                          phi )

else:
      print "Unknown option. No horsefly for you! ;-D "
      sys.exit()

#print horseflytour['tour_points']
plotTour(ax,horseflytour, run.inithorseposn, phi, algo_str)
utils_graphics.applyAxCorrection(ax)
fig.canvas.draw()
@| @}

\vspace{-0.8cm}\newchunk This chunk generates points uniformly or non-uniformly distributed in the 
unit square $[0,1]^2$ in the Matplotlib canvas. I will document the schemes used for 
generating the non-uniformly distributed points later. These schemes are important to test the effectiveness of 
the horsefly algorithms. Uniform point clouds do no highlight the weaknesses of 
sequencing algorithms as David Johnson implies in his article on how to write 
experimental algorithm papers when he talks about algorithms for the TSP. 

@D  Generate a bunch of uniform or non-uniform random points on the canvas
@{numpts = int(raw_input("\n" + Fore.YELLOW+\
                       "How many points should I generate?: "+\
                       Style.RESET_ALL)) 
run.clearAllStates()
ax.cla()
               
utils_graphics.applyAxCorrection(ax)
ax.set_xticks([])
ax.set_yticks([])
                
fig.texts = []
                 
import scipy
if event.key in ['n', 'N']: # Non-uniform random points
        run.sites = utils_algo.bunch_of_random_points(numpts)
else : # Uniform random points
        run.sites = scipy.rand(numpts,2).tolist()

patchSize  = (utils_graphics.xlim[1]-utils_graphics.xlim[0])/140.0

for site in run.sites:      
    ax.add_patch(mpl.patches.Circle(site, radius = patchSize, \
                 facecolor='blue',edgecolor='black' ))

ax.set_title('Points : ' + str(len(run.sites)), fontdict={'fontsize':40})
fig.canvas.draw()
@| @}

\vspace{-0.8cm}\newchunk 

@D Clear canvas and states of all objects
@{run.clearAllStates()
ax.cla()
              
utils_graphics.applyAxCorrection(ax)
ax.set_xticks([])
ax.set_yticks([])
                 
fig.texts = []
fig.canvas.draw()
@| @}

\vspace{-0.8cm}\newchunk 
@D Set up interactive canvas
@{fig, ax =  plt.subplots()
run = HorseFlyInput()
#print run
    
ax.set_xlim([utils_graphics.xlim[0], utils_graphics.xlim[1]])
ax.set_ylim([utils_graphics.ylim[0], utils_graphics.ylim[1]])
ax.set_aspect(1.0)
ax.set_xticks([])
ax.set_yticks([])
      
mouseClick   = utils_graphics.wrapperEnterRunPoints (fig,ax, run)
fig.canvas.mpl_connect('button_press_event' , mouseClick )
      
keyPress     = wrapperkeyPressHandler(fig,ax, run)
fig.canvas.mpl_connect('key_press_event', keyPress   )
plt.show()
@| @}



\section{Local Data Structures}

\newchunk This class manages the input and the output of the result of 
calling various horsefly algorithms. 

@D Local data-structures for classic horsefly
@{class HorseFlyInput:
      def __init__(self, sites=[], inithorseposn=()):
           self.sites         = sites
           self.inithorseposn = inithorseposn

           
      def clearAllStates (self):
          """ Set the sites to an empty list and initial horse position 
          to the empty tuple.
          """
          self.sites = []
          self.inithorseposn = ()

          
      def getTour(self, algo, speedratio, k=None, post_optimizer=None):
          """ This method runs an appropriate algorithm for calculating
          a horsefly tour. The list of possible algorithms are 
          inside this module prefixed with 'algo_'
          
          The output is a dictionary of size 2, containing two lists,
          - Contains the vertices of the polygonal 
            path taken by the horse
          - The list of sites in the order 
            in which they are serviced by the tour, i.e. the order 
            in which the sites are serviced by the fly.
          """

          if k==None and post_optimizer==None:
                return algo(self.sites, self.inithorseposn, speedratio)
          elif k == None:
                return algo(self.sites, self.inithorseposn, speedratio, post_optimizer)
          else:
                #print Fore.RED, self.sites, Style.RESET_ALL
                return algo(self.sites, self.inithorseposn, speedratio, k, post_optimizer)
          
      def __repr__(self):
          """ Printed Representation of the Input for HorseFly
          """
          if self.sites != []:
              tmp = ''
              for site in self.sites:
                  tmp = tmp + '\n' + str(site)
              sites = "The list of sites to be serviced are " + tmp    
          else:
              sites = "The list of sites is empty"

          if self.inithorseposn != ():
              inithorseposn = "\nThe initial position of the horse is " + \
                               str(self.inithorseposn)
          else:
              inithorseposn = "\nThe initial position of the horse has not been specified"
              
          return sites + inithorseposn
@| HorseFlyInput @}


Now that all the boring boiler-plate and handler codes have been 
written, its finally time for algorithmic ideas and implementations! 
Every algorithm is given an algorithmic overview followed by the 
detailed steps woven together with the source code. 

Any local utility functions, needed for algorithmic or graphing purposes 
are collected at the end of this chapter. 

\newpage

@i problem-classic-horsefly/algo-dumb.web
@i problem-classic-horsefly/algo-greedy-nn.web
@i problem-classic-horsefly/algo-greedy-incremental-insertion.web
@i problem-classic-horsefly/algo-bottom-up-split.web
@i problem-classic-horsefly/algo-local-search-swap.web
@i problem-classic-horsefly/algo-k2-means.web


@i problem-classic-horsefly/lower-bound-phi-mst.web


\section{Local Utility Functions}

\newchunk  For a given initial position of horse and fly
   return a function computing the tour length. 
   The returned function computes the tour length 
   in the order of the list of stops provided beginning 
   with the initial position of horse and fly. Since 
   the horse speed = 1, the tour length = time taken 
   by horse to traverse the route.

   This is in other words the objective function. 

@D Local utility functions for classic horsefly
@{def tour_length(horseflyinit):
   def _tourlength (x):
         
        # the first point on the tour is the
        # initial position of horse and fly
        # Append this to the solution x = [x0,x1,x2,....]
        # at the front
        htour = np.append(horseflyinit, x)
        length = 0 

        for i in range(len(htour))[:-3:2]:
                length = length + \
                         np.linalg.norm([htour[i+2] - htour[i], \
                                         htour[i+3] - htour[i+1]]) 
        return length

   return _tourlength
@| tour_length @}


\vspace{-0.8cm}\newchunk It is possible that some heuristics might return non-negligible
      waiting times. Hence I am writing a separate function which
      adds the waiting time (if it is positive) to the length of 
      each link of the tour. Again note that because 
      speed of horse = 1, we can add ``time'' to ``distance''. 

@D Local utility functions for classic horsefly
@{def tour_length_with_waiting_time_included(tour_points, horse_waiting_times, horseflyinit):
      tour_points   = np.asarray([horseflyinit] + tour_points)
      tour_links    = zip(tour_points, tour_points[1:])

      # the +1 because the inital position has been tacked on at the beginning
      # the solvers written the tour points except for the starting position
      # because that is known and part of the input. For this function
      # I need to tack it on for tour length
      assert(len(tour_points) == len(horse_waiting_times)+1) 

      sum = 0
      for i in range(len(horse_waiting_times)):

          # Negative waiting times means drone/fly was waiting
          # at rendezvous point
          if horse_waiting_times[i] >= 0:
              wait = horse_waiting_times[i]
          else:
              wait = 0
              
          sum += wait + np.linalg.norm(tour_links[i][0] - tour_links[i][1], ord=2) # 
      return sum
@| tour_length_with_waiting_time_included @}

\section{Plotting Routines}
\newchunk 
@D Plotting routines for classic horsefly 
@{def plotTour(ax,horseflytour, horseflyinit, phi, algo_str, tour_color='#d13131'):
   
    # Route for the horse
    xhs, yhs = [horseflyinit[0]], [horseflyinit[1]]
    for pt in horseflytour['tour_points']:
        xhs.append(pt[0])
        yhs.append(pt[1])

    # List of sites
    xsites, ysites = [], []
    for pt in horseflytour['site_ordering']:
        xsites.append(pt[0])
        ysites.append(pt[1])

    # Route for the fly. The fly keeps alternating
    # between the site and the horse
    xfs , yfs = [xhs[0]], [yhs[0]]
    for site, pt in zip (horseflytour['site_ordering'],
                         horseflytour['tour_points']):
        xfs.extend([site[0], pt[0]])
        yfs.extend([site[1], pt[1]])

    print "\n----------"
    print "Horse Tour"
    print "-----------"
    waiting_times = [0.0] + horseflytour['horse_waiting_times'].tolist() # the waiting time at the starting point is 0
    #print waiting_times
    for pt, time in zip(zip(xhs,yhs), waiting_times) :
        print pt, Fore.GREEN, " ---> Horse Waited ", time, Style.RESET_ALL

    print "\n----------"
    print "Fly Tour"
    print "----------"
    for item, i in zip(zip(xfs,yfs), range(len(xfs))):
        if i%2 == 0:
           print item
        else :
           print Fore.RED + str(item) + "----> Site" +  Style.RESET_ALL

    print "----------------------------------"
    print Fore.GREEN, "\nSpeed of the drone was set to be", phi
    #tour_length = utils_algo.length_polygonal_chain( zip(xhs, yhs))
    tour_length = horseflytour['tour_length_with_waiting_time_included']
    print "Tour length of the horse is ",  tour_length
    print "Algorithm code-Key used "    , algo_str, Style.RESET_ALL
    print "----------------------------------\n"
           
    #kwargs = {'size':'large'}
    for x,y,i in zip(xsites, ysites, range(len(xsites))):
          ax.text(x, y, str(i+1), bbox=dict(facecolor='#ddcba0', alpha=1.0)) 
    ax.plot(xfs,yfs,'g-') # fly tour is green
    ax.plot(xhs, yhs, color=tour_color, marker='s', linewidth=3.0) # horse is red


    # Initial position of horse and fly
    ax.add_patch( mpl.patches.Circle( horseflyinit,
                                      radius = 1/34.0,
                                      facecolor= '#D13131', #'red',
                                      edgecolor='black'   )  )


    fontsize = 20
    tnrfont = {'fontname':'Times New Roman'}
    ax.set_title( r'Algorithm Used: ' + algo_str +  '\nTour Length: ' \
                    + str(tour_length)[:7], fontdict={'fontsize':fontsize}, **tnrfont)
    ax.set_xlabel(r'Number of sites: ' + str(len(xsites)) + '\nDrone Speed: ' + str(phi) ,
                  fontdict={'fontsize':fontsize}, **tnrfont)
@| plotTour @}

\section{Animation routines}

\newchunk 
After writing out the schedule, it would be nice to have a function that animates the 
delivery process of the schedule. Every problem will have animation features unique to
its features. Any abstraction will reveal itself only after I design the various
algorithms and extract the various features, which is why I will develop these animation
routines on the fly. 

In general, all algorithms for a problem will write out a YAML file containing the schedule 
in the outputted run-folder. To animate a schedule and write the resulting movie to disk
we just pass the name of the file containing the schedule. Since the output file-format
of the schedule is identical for all algorithms of a problem, it is sufficient to have
just one animation function. 

Schedules will typically be animated iff there is a \verb|animate_schedule_p| boolean 
flag set to \verb|True| in the arguments of every algorithm's function. 

Here we render the Horse and Fly moving according to their 
assigned tours at their respective speeds, we don't 
need to ``coordinate'' the plotting since that has already 
been done by the scheudle itself. 
    
A site that has been unserviced is represented by a blue dot. 
A site that has been serviced is represented by a yellow dot. 
   
@d Animation routines for classic horsefly@{
def animateSchedule(schedule_file_name):
     import yaml
     import numpy as np
     import matplotlib.animation as animation
     from matplotlib.patches import Circle
     import matplotlib.pyplot as plt 

     @<Set up configurations and parameters for animation and plotting@>
     @<Parse input-output file and set up required data-structures@>
     @<Construct and store every frame of the animation in \verb|ims| @>
     @<Write animation of schedule to disk and display in live window@>
@|  @}

\vspace{-0.8cm} \newchunk In the  animation, we are going to show the process of the fly delivering 
packages to the sites according to the pre-computed schedule. Thus the canvas must reflect the 
underlying euclidean space. For this, we need to set the bounding box of the \verb|Axes| object
to an axis-parallel unit-square whose lower-left corner is at the origin. 

While displaying the animation it also helps to have a major and minor grid lightly visible to 
get a rough sense of distances between the sites. The settings for setting up these grids were done following
the tutorial on \url{http://jonathansoma.com/lede/data-studio/matplotlib/adding-grid-lines-to-a-matplotlib-chart/}

We also use \LaTeX{} symbols and the Computer Modern font for representing equations and text on the plot. 
Unfortunately, Matplotlib's present default font for text seems to be DejaVu Sans Mono, which isn't pretty 
for publications. 

@d Set up configurations and parameters for animation and plotting@{
plt.rc('text', usetex=True)
plt.rc('font', family='serif')

fig, ax = plt.subplots()
ax.set_xlim([0,1])
ax.set_ylim([0,1])
ax.set_aspect('equal')

ax.set_xticks(np.arange(0, 1, 0.1))
ax.set_yticks(np.arange(0, 1, 0.1))

# Turn on the minor TICKS, which are required for the minor GRID
ax.minorticks_on()

# customize the major grid
ax.grid(which='major', linestyle='--', linewidth='0.3', color='red')

# Customize the minor grid
ax.grid(which='minor', linestyle=':', linewidth='0.3', color='black')

ax.get_xaxis().set_ticklabels([])
ax.get_yaxis().set_ticklabels([])
@| @}



\vspace{-0.8cm} \newchunk In this chunk, by \verb|horse_leg| we mean the segment of a horse's 
tour between two successive rendezvous points with a fly while a \verb|fly_leg| stands for 
the part of a fly tour when the fly leaves the horse, reaches a site, and returns back to the horse. These
concepts are illustrated in the diagram below. The frames of the animation are constructed by first
extracting the \verb|horse_legs| and \verb|fly_legs| of the horse and fly-tours and then 
animating the horse and fly moving along each of their respective legs. 


@D Parse input-output file and set up required data-structures @{   
with open(schedule_file_name, 'r') as stream:
      schedule = yaml.load(stream)

phi           = float(schedule['phi'])
inithorseposn = schedule['inithorseposn']

# Get legs of the horse and fly tours
horse_tour  = map(np.asarray, schedule['horse_tour']   )
sites       = map(np.asarray, schedule['visited_sites'])
           
# set important meta-data for plot
ax.set_title("Number of sites: " + str(len(sites)), fontsize=25)
ax.set_xlabel(r"$\varphi$ = " + str(phi), fontsize=20)

xhs = [ horse_tour[i][0] for i in range(len(horse_tour))]    
yhs = [ horse_tour[i][1] for i in range(len(horse_tour))]    
xfs , yfs = [xhs[0]], [yhs[0]]
for site, pt in zip (sites,horse_tour[1:]):
         xfs.extend([site[0], pt[0]])
         yfs.extend([site[1], pt[1]])
fly_tour = map(np.asarray,zip(xfs,yfs))

horse_legs = zip(horse_tour, horse_tour[1:])
fly_legs   = zip(fly_tour, fly_tour[1:], fly_tour[2:]) [0::2]

assert(len(horse_legs) == len(fly_legs))
@| @}


\vspace{-0.8cm} \newchunk The \verb|ims| array stores each frame of the animation. Every frame consists of 
various ``artist'' objects \footnote{This is Matplotlib terminology} (e.g. circles and segments) which change dynamically as the positions of the horse 
and flies change. 

@d Construct and store every frame of the animation in \verb|ims|
@{ims = []
for horse_leg, fly_leg, leg_idx in zip(horse_legs, \
                                       fly_legs,   \
                                       range(len(horse_legs))):
     debug(Fore.YELLOW + "Animating leg: "+ str(leg_idx) + Style.RESET_ALL)

     @<Define function to place points along a leg@>

     horse_posns = discretize_leg(horse_leg)
     fly_posns   = discretize_leg(fly_leg) 
     assert(len(horse_posns) == len(fly_posns))

     hxs = [xhs[i] for i in range(0,leg_idx+1) ]
     hys = [yhs[i] for i in range(0,leg_idx+1) ]
           
     fxs , fys = [hxs[0]], [hys[0]]
     for site, pt in zip (sites,(zip(hxs,hys))[1:]):
          fxs.extend([site[0], pt[0]])
          fys.extend([site[1], pt[1]])

     number_of_sites_serviced = leg_idx
     for horse_posn, fly_posn, subleg_idx in zip(horse_posns, \
                                                 fly_posns,   \
                                                 range(len(horse_posns))):
          @<Render frame and append it to \verb|ims|@>
@| number_of_sites_serviced @}



\vspace{-0.8cm} \newchunk  Note that the magic-number  ``9'' in the block below is 
related to the 10 and 19 constants from the \verb|discretize_leg| function

@D Render frame and append it to \verb|ims| @{   
debug(Fore.RED + "Rendering subleg "+ str(subleg_idx) + Style.RESET_ALL)
hxs1 = hxs + [horse_posn[0]]
hys1 = hys + [horse_posn[1]]
               
fxs1 = fxs + [fly_posn[0]]
fys1 = fys + [fly_posn[1]]
                 
# There is a midway update for new site check is site 
# has been serviced. If so, update fxs and fys
if subleg_idx == 9:
    fxs.append(sites[leg_idx][0])
    fys.append(sites[leg_idx][1])
    number_of_sites_serviced += 1

horseline, = ax.plot(hxs1,hys1,'ro-', linewidth=5.0, markersize=6, alpha=1.00)
flyline,   = ax.plot(fxs1,fys1,'go-', linewidth=1.0, markersize=3)

objs = [flyline,horseline] 
 
# Mark serviced and unserviced sites with
# differen colors. Use https://htmlcolorcodes.com/
# for choosing good colors along and their hex-codes.

for site, j in zip(sites, range(len(sites))):
    if j < number_of_sites_serviced:       # site has been serviced
        sitecolor = '#DBC657' # yellowish
    else:                                  # site has not been serviced
        sitecolor = 'blue'

    circle = Circle((site[0], site[1]), 0.02, \
                    facecolor = sitecolor   , \
                    edgecolor = 'black'     , \
                    linewidth=1.4)
    sitepatch = ax.add_patch(circle)
    objs.append(sitepatch)

debug(Fore.CYAN + "Appending to ims "+ Style.RESET_ALL)
ims.append(objs[::-1])
@| @}


\vspace{-0.8cm} \newchunk The numbers 19 and 10 are arbitrarily chosen. These seem 
to work well for giving smooth real-time animation. 
@d Define function to place points along a leg @{   
def discretize_leg(pts):
   subleg_pts = []
   numpts     = len(pts)

   if numpts == 2:
       k  = 19 # horse
   elif numpts == 3:
       k  = 10 # fly

   for p,q in zip(pts, pts[1:]):
       tmp = []
       for t in np.linspace(0,1,k): 
           tmp.append( (1-t)*p + t*q ) 
       subleg_pts.extend(tmp[:-1])

   subleg_pts.append(pts[-1])
   return subleg_pts
@| @}




\vspace{-0.8cm} \newchunk
@D Write animation of schedule to disk and display in live window
@{from colorama import Back 

debug(Fore.BLACK + Back.WHITE + "\nStarted constructing ani object"+ Style.RESET_ALL)
ani = animation.ArtistAnimation(fig, ims, interval=80, blit=True, repeat_delay=1000)
debug(Fore.BLACK + Back.WHITE + "\nFinished constructing ani object"+ Style.RESET_ALL)

plt.show() # For displaying the animation in a live window. 

debug(Fore.MAGENTA + "\nStarted writing animation to disk"+ Style.RESET_ALL)
ani.save(schedule_file_name+'.avi', dpi=250)
debug(Fore.MAGENTA + "\nFinished writing animation to disk"+ Style.RESET_ALL)
@| @}





\section{Chapter Index of Fragments}
@m
\section{Chapter Index of Identifiers}
@u 

%------------------------------------------------------
@S
%------------------------------------------------------