\newpage
\section{Lower Bound: The $\varphi$-Prim-MST}  

\subsection*{Overview}\hspace{0.1cm}
To compare the experimental performance of algorithms for NP-hard optimization 
problems wrt solution quality, it helps to have a cheaply computable lower bound 
that acts as a proxy for OPT. In the case of the TSP, a lower bound is the weight 
of the minimum spanning tree on the set of input sites.

To compute the MST on a set of points, on typically uses greedy algorithms such as 
those by Prim, Kruskal or Boruvka. To get a lower-bound for Horsefly, we define a 
network that we call the $\varphi$-Prim-MST by a simple generalization of Prim. 
Currently, we don't have a natural interpretation of this structure means in 
terms of the sites. This is something we need to add to our TODO list. 

\begin{center}
\missingfigure[figwidth=6cm]{Testing a long text string}
\end{center}

This is clearly a lower-bound on the weight of $OPT$ for Collinear Horsefly. However, 
I believe that the stronger statement is also true

\begin{fconj}
The weight of the $\varphi$-MST is a lower-bound on the length of the 
horse's tour in $OPT$ for the classic horsefly problem. 
\end{fconj}

The proof of this conjecture seems to be non-trivial off-hand. I'll put a hold on 
all my attempts so far to prove this, since I want the experiments to guide 
my intuition here. 

It is possible that there could be other lower bounds based on generalizing 
the steps in Kruskal's and Boruvka's algorithms. Based on the experimental 
success of the $\varphi$-MST's, I will think of the appropriate generalizations 
for them later. 

One particular experiment that I would be interested would be how bad is to check
the crossing structure of the edges. In the MST edges never cross. What is the 
structure of the crossing in $\varphi$-MSTs? That might help me in designing a local
search operation for the Horsefly problem. 

Also note, that the construction of this $\varphi$-Prim MST can be generalized to 
two or more flies (single horse) we buld two separate trees; with two or more drones
since we are interested in minimizing the makespan, probably we greedily them so that
the trees are well-balanced.....?????? dunno doesn't strike as clean now that I 
think of it. It certainly isn't as clean as my node-splitting horsefly framework. 
Hopefully, I can prove some sort of theorems on those later? 

\begin{note}
As I type this, a separate question strikes me to be of independent interest: 
\textit{Given a point-cloud in the plane, preprocess the points such that for a 
query $\varphi$ we can compute the $\varphi$-MST in linear time}. Perhaps the MST, 
itself could be useful for this augmented with some data-structures for performing 
ray-shooting in an arrangement of segments. One can use such a data-structure, for 
making a quick animation of the evolution of the $\varphi$-MST as we keep 
changing the $\varphi$-parameter, as one often does while playing with Mathematica's 
\texttt{Manipulate} function. Can we motivate this by saying $\varphi$ might be 
uncertain? I don't know, people would only find this interesting if the particular 
data-structure helps in the computation of horsefly like tours. 
\end{note}

\subsection*{Computing the $\varphi$-Prim-MST }

\newchunk For the purposes of this section we define the notion of a rendezvous 
point for an edge. Given a directed segment $\overrightarrow{XY}$ and a speed 
ratio $\varphi$, assume a horse and a fly are positioned at $X$ and there is a 
site that needs to be serviced at $Y$. The rendezvous point
of $\overrightarrow{XY}$ is that point along $R$ at which the horse and fly meet 
up at the earliest after the fly leaves $X$. Explicit formulae for computing this 
point have already been implemented in \verb|single_site_solution|, in one of the 
previous sections. 

\newchunk Prim's algorithm for computing MSTs is essentially a greedy incremental 
insertion process. The same structure is visible in the code fragment below. The only
essential change from Prim's original algorithm is that we ``grow'' the tree only from 
the rendezvous points computed while inserting a new edge into the existing partial 
tree on the set of sites. This process is animated in 
\autoref{fig:animating-growth-of-phi-prim-mst}

I have will be using the \verb|NetworkX| library (\url{https://networkx.github.io/}) for 
storing and manipulating graphs. For performing efficient nearest-neighbor searches for 
each rendezvous point in the partially constructed MST, I will use the \verb|scikit-learn| 
library (\url{https://scikit-learn.org/stable/modules/neighbors.html}). When porting 
my codes to C\texttt{++}, I will probably have to switch over to the Boost Graph library and 
David Mount's ANN for the same purposes(both these libraries have been optmized for speed). 

In the \verb|while| loop below, \verb|node_site_info| stores a tuple for each node in the tree 
consisting of
\begin{enumerate}
\item a node-id (this corresponds to a rendezvous point in the tree)
\item the index of the closest site in the array sites for the node (the site)
\item distance of the node to the site with the above index.
\end{enumerate}

%{python-mode}%
@D Lower bounds for classic horsefly 
@{def compute_phi_prim_mst(sites, inithorseposn,phi):

     import networkx as nx
     from sklearn.neighbors import NearestNeighbors
     
     @<Create singleton graph, with node at \verb|inithorseposn| @>

     unmarked_sites_idxs = range(len(sites))
     while unmarked_sites_idxs:
          node_site_info = []
          
          @<For each node, find the closest site@>    
          @<Find the node with the closest site, and generate the next node and edge for the $\varphi$-MST@>
          
          # Marking means removing from unmarked list :-D
          unmarked_sites_idxs.remove(next_site_to_mark_idx)
          
     utils_algo.print_list(G.nodes.data())
     utils_algo.print_list(G.edges.data())
     return G
@| compute_phi_prim_mst, unmarked_sites_idxs @}
%{/python-mode}%


\vspace{-0.8cm} \newchunk Every node in the tree stores its own id as an integer along with 
its X-Y coordinates and the X-Y coordinates of the sites that it will be joined to with a 
straight-line segment. At the beginning the single node of the tree at the initial position
of the horse and fly has not been joined to any sites, and hence is empty. 

%{python-mode}%
@d Create singleton graph, with node at \verb|inithorseposn| 
@{G = nx.Graph()
G.add_node(0, mycoordinates=inithorseposn, joined_site_coords=[])
@| @}
%{/python-mode}%



\vspace{-0.8cm} \newchunk
%{python-mode}%
@d For each node, find the closest site @{   
for nodeid, nodeval in G.nodes.data():
    current_node_coordinates = np.asarray(nodeval['mycoordinates'])
    distances_of_current_node_to_sites = []
               
    # The following loop finds the nearest unmarked site. So far, I am 
    # using brute force for this, later, I will use sklearn.neighbors.
    for j in unmarked_sites_idxs:
        site_coordinates = np.asarray(sites[j])
        dist             =  np.linalg.norm( site_coordinates - current_node_coordinates )
                    
        distances_of_current_node_to_sites.append( (j, dist) )

        nearest_site_idx, distance_of_current_node_to_nearest_site = \
                        min(distances_of_current_node_to_sites, key=lambda (_, d): d)

        node_site_info.append((nodeid, \
                                  nearest_site_idx, \
                                  distance_of_current_node_to_nearest_site))
@| @}
%{/python-mode}%

\needspace{3cm}
\vspace{-0.8cm} \newchunk
%{python-mode}%
@d Find the node with the closest site, and generate the next node and edge for the $\varphi$-MST @{
opt_node_idx,          \
next_site_to_mark_idx, \
distance_to_next_site_to_mark = min(node_site_info, key=lambda (h,k,d) : d)

tmp = sites[next_site_to_mark_idx]
G.nodes[opt_node_idx]['joined_site_coords'].append(  tmp   ) 
(r, h) = single_site_solution(tmp, G.nodes[opt_node_idx]['mycoordinates'], phi) 
          
# Remember! indexing of nodes started at 0, thats why you set
# numnodes to the index of the newly inserted node. 
newnodeid = len(list(G.nodes))

# joined_site_coords will be updated in the future iterations of while :
G.add_node(newnodeid, mycoordinates=r, joined_site_coords=[]) 
  
# insert the edge weight, will be useful later when 
# computing sum total of all the edges.
G.add_edge(opt_node_idx, newnodeid, weight=h ) 
@| @}
%{/python-mode}%
