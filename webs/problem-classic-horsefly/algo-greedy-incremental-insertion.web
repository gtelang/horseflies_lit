\section{Algorithm: Greedy---Incremental Insertion}
\subsection*{Algorithmic Overview}
\newchunk The greedy nearest neighbor heuristic described in \autoref{sec:greedy-nn} gives an $O(\log n)$ 
          approximation for $n$ sites in the plane. However, there exists an alternative greedy incremental 
          insertion algorithm for the TSP that yields a 2-approximation. Similar to the greedy-nn algorithm 
          we can generalize the greedy-incremental approach to the collinear-horseflies setting 
          (cf: \autoref{fig:collinear-horseflies}). 
\newchunk In this approach, we maintain a list of visited sites $V$ (along with the order of visitation 
          $\mathcal{O}$) and the unvisited sites $U$. For the given collinear-horsefly tour serving $V$ 
          pick a site $s$ from $U$ along with a position in $\mathcal{O}$ (calling the resulting ordering  
          $\mathcal{O^{'}}$  ) that minimizes the cost of the horsefly tour serving the sites $V \cup \{s\}$ 
          in the order $\mathcal{O^{'}}$. 

% \begin{figure}[H]
% \centering
% \includegraphics[width=8cm]{../webs/docs/incremental_insertion_frames.eps}
% \end{figure}

\begin{figure}[H]
\centering
\begin{tabular}{cc}
\includegraphics[width=8cm]{../webs/docs/algo-greedy-incremental-insertion---Day-2018-12-24_ClockTime-19:31:02/algo_state_00000.png}&
\includegraphics[width=8cm]{../webs/docs/algo-greedy-incremental-insertion---Day-2018-12-24_ClockTime-19:31:02/algo_state_00001.png}\\
\includegraphics[width=8cm]{../webs/docs/algo-greedy-incremental-insertion---Day-2018-12-24_ClockTime-19:31:02/algo_state_00002.png}&
\includegraphics[width=8cm]{../webs/docs/algo-greedy-incremental-insertion---Day-2018-12-24_ClockTime-19:31:02/algo_state_00003.png}\\
\includegraphics[width=8cm]{../webs/docs/algo-greedy-incremental-insertion---Day-2018-12-24_ClockTime-19:31:02/algo_state_00004.png}&
\includegraphics[width=8cm]{../webs/docs/algo-greedy-incremental-insertion---Day-2018-12-24_ClockTime-19:31:02/algo_state_00005.png}\\
\end{tabular}
\caption{Greedy incremental insertion for collinear horseflies. $\varphi=3.0$. Notice that 
the ordering of the visited sites keep changing based on where we decide to insert an 
unvisited site.}
\label{fig:greedy-incremental-example}
\end{figure}


\autoref{fig:greedy-incremental-example} depicts the incremental insertion process for 
the case of 4 sites and $\varphi=3$. Notice that the ordering of the visited sites keep 
changing based on where we decide to insert an unvisited site. 

The implementation of this algorithm for collinear-horseflies raises several interesting non-trivial 
data-structural questions in their own right: how to quickly find the site from $U$ to 
insert into $V$, and keep track the changing length of the horsefly tour. Note that inserting a site 
causes the length of the tour of the truck to change, for all the sites after $s$. 
 
\subsection*{Algorithmic Details}
\newchunk The implementation of the algorithm is ``parametrized'' over various strategies for insertion. 
i.e. we treat each insertion policy as a black-box argument to the function.
 
Efficient policies for detecting the exact or approximate point for cheapest insertion will be 
described in \autoref{subsec:insertion-policies}.  We also implement a ``naive'' policy as a way 
benchmark the quality and speed of implementation of future insertion policies. 

@D Algorithms for classic horsefly @{
@<Define auxiliary helper functions@>
@<Define various insertion policy classes@>
def algo_greedy_incremental_insertion(sites, inithorseposn, phi,
                                      insertion_policy_name = "naive",
                                      render_algo_states_to_image_files_p = True,
                                      post_optimizer        = None):
      @<Set log, algo-state and input-output files config@>
      @<Set insertion policy class for current run@>

      while insertion_policy.unvisited_sites_idxs: 
         @<Use insertion policy to find the cheapest site to insert into current tour@>
         @<Write algorithm's current state to file@>

      @<Write input and output to file@>
      @<If \verb|render_algo_states_to_image_files_p| $==$ \verb|True|, make an animation of algorithm states @>
      @<Return horsefly tour, along with additional information@>
@| algo_greedy_incremental_insertion, render_algo_states_to_image_files_p @}


\newchunk Note that for each run of the algorithm, we create a dedicated directory and 
use a corresponding log file  in that directory. It will typically containe detailed 
information on the progress of the algorithm and the steps executed. 

For algorithm analysis, and verification of correctness,on the other hand, we will 
typically  be interested in the states of the data-structures at the end of 
the while loop; each such state will be written out as a YAML file. Such files can 
be useful for animating the progress of the algorithm. 

Finally, just before returning the answer, we write the input and output 
to a separate YAML file. All in all, there are three ``types'' of output files
within each directory that corresponds to an algorithm's run: 
\underline{a log file}, \underline{algorithm states files}, and finally 
an \underline{input-output file}. 

@D Set log, algo-state and input-output files config @{  
import sys, logging, datetime, os, errno

algo_name     = 'algo-greedy-incremental-insertion'
time_stamp    = datetime.datetime.now().strftime('Day-%Y-%m-%d_ClockTime-%H:%M:%S')
dir_name      = algo_name + '---' + time_stamp
log_file_name = dir_name + '/' + 'run.log'
io_file_name  = 'input_and_output.yml'

# Create directory for writing data-files and logs to for 
# current run of this algorithm
try:
    os.makedirs(dir_name)
except OSError as e:
    if e.errno != errno.EEXIST:
        raise

logging.basicConfig( filename = log_file_name,
                     level    = logging.DEBUG,
                     format   = '%(asctime)s: %(levelname)s: %(message)s',
                     filemode = 'w' )
#logger = logging.getLogger()
info("Started running greedy_incremental_insertion for classic horsefly")

algo_state_counter = 0 
@| io_file_name, logger @}


\newchunk This fragment merely sets the variable \verb|insertion_policy| to 
the appropriate function. This will later help us in studying the speed of 
the algorithm and quality of the solution for various insertion policies 
during the experimental analysis. 

@D Set insertion policy class for current run @{
if insertion_policy_name == "naive":
     insertion_policy = PolicyBestInsertionNaive(sites, inithorseposn, phi)
else: 
     print insertion_policy_name
     sys.exit("Unknown insertion policy: ")

debug("Finished setting insertion policy: " + insertion_policy_name)
@| @}


\newchunk Note that while defining the body of the algorithm, we treat the insertion policy 
(whose name has already been passed as an string argument) as a kind of black-box, since all 
policy classes have the same interface. The detailed implementation for the various 
insertion policies are given later. 

@D Use insertion policy to find the cheapest site to insert into current tour 
@{insertion_policy.insert_another_unvisited_site()
debug(Fore.GREEN + "Inserted another unvisited site" + Style.RESET_ALL)
@| @}

\newchunk When using Python 2.7 (as I am doing with this suite of programs), you should have the 
\texttt{pyyaml} module version 3.12 installed. Version 4.1 breaks for some weird reason; it can't seem to serialized
Numpy objects. See \url{https://github.com/kevin1024/vcrpy/issues/366} for a brief discussion on this topic. 

The version of \verb|pyyaml| on your machine can be checked by printing the value of \verb|yaml.__version__|. 
To install the correct version of pyyaml (if you get errors)  use

\begin{verbatim} 
              sudo pip uninstall pyyaml && sudo pip install pyyaml=3.12
\end{verbatim}

@D Write algorithm's current state to file @{   
import yaml
algo_state_file_name = 'algo_state_'                    + \
                       str(algo_state_counter).zfill(5) + \
                       '.yml'

data = {'insertion_policy_name' : insertion_policy_name                       ,
        'unvisited_sites'       : [insertion_policy.sites[u] \
                                       for u in insertion_policy.unvisited_sites_idxs], 
        'visited_sites'         : insertion_policy.visited_sites                    , 
        'horse_tour'            : insertion_policy.horse_tour }

with open(dir_name + '/' + algo_state_file_name, 'w') as outfile:
     yaml.dump( data   , \
                outfile, \
                default_flow_style = False)
     @<If \verb|render_algo_states_to_image_files_p| flag is set to \verb|True|, render current algorithm state to file @>

algo_state_counter = algo_state_counter + 1
debug("Dumped algorithm state to " + algo_state_file_name)
@| @}


\newchunk We use the \verb|render_algo_states_to_image_files_p| boolean argument to explicitly specify whether to draw 
the current algorithm state or not. This is because Matplotlib is \underline{very} slow when writing 
image files to disk. Later on, I will probably switch to Asymptote for all my plotting, but for the 
moment I will stick to Matplotlib because I don't want to have to switch languages right now. 
 
And much of my plots will be of a reasonably high-quality for the purpose of presentations. This will naturally 
affect timing/benchmarking results. 

@D If \verb|render_algo_states_to_image_files_p| flag is set to \verb|True|, render current algorithm state to file @{
import utils_algo
if render_algo_states_to_image_files_p:
     @<Set up plotting area and canvas, fig, ax, and other configs@>  
     @<Extract $x$ and $y$ coordinates of the points on the horse, fly tours, visited and unvisited sites@>  
     @<Mark initial position of horse and fly boldly on canvas@>  
     @<Place numbered markers on visited sites to mark the order of visitation explicitly@>
     @<Draw horse and fly-tours@>
     @<Draw unvisited sites as filled blue circles@>
     @<Give metainformation about current picture as headers and footers@>
     @<Write image file@>
@}

\newchunk 
@DSet up plotting area and canvas, fig, ax, and other configs @{
from matplotlib import rc
rc('font', **{'family': 'serif', \
           'serif': ['Computer Modern']})
rc('text', usetex=True)
fig,ax = plt.subplots()
ax.set_xlim([0,1])
ax.set_ylim([0,1])
ax.set_aspect(1.0)
ax = fig.gca()
ax.set_xticks(np.arange(0, 1, 0.1))     
ax.set_yticks(np.arange(0, 1., 0.1))
plt.grid(linestyle='dotted')
ax.set_xticklabels([]) # to remove those numbers at the bottom
ax.set_yticklabels([])

ax.tick_params(
    bottom=False,      # ticks along the bottom edge are off
    left=False,        # ticks along the top edge are off
    labelbottom=False) # labels along the bottom edge are off
@}

\newchunk Matplotlib typically plots points using x and y coordinates of the points in separate points. 
@D Extract $x$ and $y$ coordinates of the points on the horse, fly tours, visited and unvisited sites @{  

# Route for the horse
xhs = [ data['horse_tour'][i][0] \
          for i in range(len(data['horse_tour']))  ]    
yhs = [ data['horse_tour'][i][1] \
          for i in range(len(data['horse_tour']))  ]    

# Route for the fly. The fly keeps alternating between the site and the horse
xfs , yfs = [xhs[0]], [yhs[0]]
for site, pt in zip (data['visited_sites'],
                     data['horse_tour'][1:]):
    xfs.extend([site[0], pt[0]])
    yfs.extend([site[1], pt[1]])
        
xvisited = [ data['visited_sites'][i][0] \
               for i in range(len(data['visited_sites']))  ]    
yvisited = [ data['visited_sites'][i][1] \
               for i in range(len(data['visited_sites']))  ]    
    
xunvisited = [ data['unvisited_sites'][i][0] \
                 for i in range(len(data['unvisited_sites']))  ]    
yunvisited = [ data['unvisited_sites'][i][1] 
                 for i in range(len(data['unvisited_sites'])) ]    

debug("Extracted x and y coordinates for route of horse, fly, visited and unvisited sites")
@}

\newchunk 
@D Mark initial position of horse and fly boldly on canvas 
@{ax.add_patch( mpl.patches.Circle( inithorseposn, \
                                  radius = 1/55.0,\
                                  facecolor= '#D13131', #'red',\
                                  edgecolor='black')  )
debug("Marked the initial position of horse and fly on canvas")
@}

@d Draw horse and fly-tours 
@{ax.plot(xfs,yfs,'g-',linewidth=1.5)  
ax.plot(xhs, yhs, color='r', \
        marker='s', markersize=3, \
        linewidth=2.0) 
debug("Plotted the horse and fly tours")
@}

@D Place numbered markers on visited sites to mark the order of visitation explicitly 
@{for x,y,i in zip(xvisited, yvisited, range(len(xvisited))):
     ax.text(x, y, str(i+1),  fontsize=8, \
             bbox=dict(facecolor='#ddcba0', alpha=1.0, pad=2.0)) 

debug("Placed numbered markers on visited sites")
@}

@D Draw unvisited sites as filled blue circles 
@{for x, y in zip(xunvisited, yunvisited):
     ax.add_patch( mpl.patches.Circle( (x,y),\
                                    radius    = 1/100.0,\
                                    facecolor = 'blue',\
                                    edgecolor = 'black')  )
debug("Drew univisted sites")
@| @}


\newchunk 
@D Give metainformation about current picture as headers and footers 
@{fontsize = 15
ax.set_title( r'Number of sites visited so far: ' +\
               str(len(data['visited_sites']))   +\
               '/' + str(len(sites))           ,  \
                    fontdict={'fontsize':fontsize})
debug("Setting title, headers, footers, etc...")
@}

Note that after writing image files, you should close the current figure. Otherwise
the collection of all the open figures start hogging the RAM. Matplotlib throws a
a warning to this effect (if you don't close to the figures) after writing about 
20 figures:

\begin{CVerbatim}[fontsize=\small]
/usr/local/lib/python2.7/dist-packages/matplotlib/pyplot.py:528: RuntimeWarning: 
More than 20 figures have been opened. Figures created through the pyplot interface 
(`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume 
too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
max_open_warning, RuntimeWarning)
\end{CVerbatim}

There is a  Stack Overflow answer (\url{https://stackoverflow.com/a/21884375/505306}) 
which advises to call \verb|plt.close()| after writing out a file that closes the 
\textit{current} figure to avoid the above warning. 

@D Write image file @{
image_file_name = 'algo_state_'                    +\
                  str(algo_state_counter).zfill(5) +\
                     '.png'
plt.savefig(dir_name + '/' + image_file_name,  \
            bbox_inches='tight', dpi=250)
print "Wrote " + image_file_name + " to disk"   
plt.close() 

debug(Fore.BLUE+"Rendered algorithm state to image file"+Style.RESET_ALL)
@| @}     


\newchunk The final answer is written to disk in the form of a YAML file. It lists the input sites 
in the order of visitation computed by the algorithm and gives the tour of the horse. 
Note that the number of points on the horse's tour is 1 more than the number of given sites. 

@D Write input and output to file 
@{# ASSERT: `inithorseposn` is included as first point of the tour
assert(len(insertion_policy.horse_tour) == len(insertion_policy.visited_sites) + 1) 

# ASSERT: All sites have been visited. Simple sanity check 
assert(len(insertion_policy.sites)   == len(insertion_policy.visited_sites)) 

data = {'insertion_policy_name' : insertion_policy_name   ,
        'visited_sites'  : insertion_policy.visited_sites , 
        'horse_tour'     : insertion_policy.horse_tour    , 
        'phi'            : insertion_policy.phi           , 
        'inithorseposn'  : insertion_policy.inithorseposn}

with open(dir_name + '/' + io_file_name, 'w') as outfile:@%
     yaml.dump( data, \
                outfile, \
                default_flow_style=False)
debug("Dumped input and output to " + io_file_name)
@| @}

\newchunk If algorithm states have been rendered to files in the run-folder, we stitch them together using \verb|ffmpeg|
and make an \verb|.mp4| animation of the changing states of the algorithms. The \verb|.mp4| file will be in the algorithm's
run folder. I used the  tutorial given on \url{https://en.wikibooks.org/wiki/FFMPEG_An_Intermediate_Guide/image_sequence}
for choosing the particular command-line options to \verb|ffmpeg| below. The options \texttt{-hide\_banner -loglevel panic} 
to quieten \verb|ffmpeg|'s output were suggested by  \url{https://superuser.com/a/1045060/102371} 

@D If \verb|render_algo_states_to_image_files_p| $==$ \verb|True|, make an animation of algorithm states 
@{if render_algo_states_to_image_files_p:
     import subprocess, os
     os.chdir(dir_name)
     subprocess.call( ['ffmpeg',  '-hide_banner', '-loglevel', 'verbose', \
                       '-r', '1',  '-i', 'algo_state_%05d.png', \
                       '-vcodec', 'mpeg4', '-r', '10' , \
                       'algo_state_animation.avi']  )
     os.chdir('../')
@| @}

\newchunk 
@D Return horsefly tour, along with additional information
@{debug("Returning answer")
horse_waiting_times = np.zeros(len(sites))
return {'tour_points'                : insertion_policy.horse_tour[1:],
        'horse_waiting_times'        : horse_waiting_times, 
        'site_ordering'              : insertion_policy.visited_sites,
        'tour_length_with_waiting_time_included': \
                                       tour_length_with_waiting_time_included(\
                                                    insertion_policy.horse_tour[1:], \
                                                    horse_waiting_times, \
                                                    inithorseposn)}
@| @}

\newchunk We now define some of the functions that were referred to in the above chunks. 
Given the intial position of the truck and drone, and a list of sites, we need to compute 
the collinear horsefly tour length for the given ordering. This is the function that is 
used in every policy class while deciding which is the cheapest unvisited site to insert 
into the current ordering of visited sites. 

Note that the order in which sites are passed to this function matters. It 
assumes that you want to compute the collinear horseflies tour length for the 
sites \textit{in the given order.} 

For this, we use the formula for computing the rendezvous point when there is 
only a single site, given by the code-chunk below. 

%\begin{center}
%\missingfigure[figwidth=6cm]{Sigle site analytic}
%\end{center}

@D Define auxiliary helper functions 
@{def single_site_solution(site, horseposn, phi):
     
     h = np.asarray(horseposn)
     s = np.asarray(site)
     
     hs_mag  = 1.0/np.linalg.norm(s-h) 
     hs_unit = 1.0/hs_mag * (s-h)
     
     r      = h +  2*hs_mag/(1+phi) * hs_unit # Rendezvous point
     hr_mag = np.linalg.norm(r-h)

     return (tuple(r), hr_mag) 
@| single_site_solution @}

With that the tour length functions for collinear horseflies can be implemented as 
an elementary instance of the fold pattern of functional programming. 
\footnote{Python has folds tucked away in some corner of its standard library. 
But I am not using it during the first hacky portion of this draft. Also Shane 
mentioned it has performance issues? Double-check this later!}
@D Define auxiliary helper functions 
@{def compute_collinear_horseflies_tour_length(sites, horseposn, phi):

     if not sites: # No more sites, left to visit!
          return 0
     else:         # Some sites are still left on the itinerary

          (rendezvous_pt, horse_travel_length) = single_site_solution(sites[0], horseposn, phi )
          return horse_travel_length  + \
                 compute_collinear_horseflies_tour_length( sites[1:], rendezvous_pt, phi )
@| compute_collinear_horseflies_tour_length @}

@d Define auxiliary helper functions @{   
def compute_collinear_horseflies_tour(sites, inithorseposn, phi):

      horseposn         = inithorseposn
      horse_tour_points = [inithorseposn]

      for site in sites:
          (rendezvous_pt, _) = single_site_solution(site, horseposn, phi )
            
          horse_tour_points.append(rendezvous_pt)
          horseposn = rendezvous_pt

      return horse_tour_points
@| compute_collinear_horseflies_tour @}



\section{Insertion Policies} 
\label{subsec:insertion-policies}

We have finished implemented the entire algorithm, except 
for the implementation of the various insertion policy classes. 

The main job of an insertion policy class is to keep track 
of the  unvisited sites,  the order of the visited sites and the 
horsefly tour itself. Every time, the method \verb|.get_next_site(...)| is called, it 
chooses an appropriate (i.e. cheapest) unvisited site to insert 
into the current ordering, and update the set of visited and unvisited sites
and details of the horsefly tour.  

To do this quickly it will typically need auxiliary data-structures whose specifics 
will depend on the details of the policy chosen. 

\subsection{Naive Insertion} \quad First, a naive implementation
  of the cheapest insertion heuristic, that will be useful in future
  benchmarking of running times and solution quality for implementations 
  that are quicker but make more sophisticated uses of data-structures. 

  In this policy for each unvisited site we first find the 
  position in the current tour, which after insertion into that position
  amongst the visited sites yields the smallest increase in the 
  collinear-horseflies tour-length. 

  Then we pick the unvisited site which yields the overall smallest 
  increase in tour-length and insert it into its computed position
  from its previous paragraph. 
     
  Clearly this implementation and has at least quadratic running time. 
  Later on, we will be investigating algorithms and data-structures 
  for speeding up this operation. 

  The hope is to be able to find a dynamic data-structure to perform this 
  insertion in logarithmic time. Variations on tools such as the well-separated pair 
  decomposition might help achieve this goal. Jon Bentley
  used kd-trees to perform the insertion in his experimental TSP
  paper, but he wasn't dealing with the shifting tour structure
  as we have in horseflies. Also he did not deal with the question 
  of finding an approximate point for insertion. These 

\newchunk Since the interface for all policy classes will be the same, it is 
best, if have a base class for such classes. Since the details of 
the interface may change, I'll probably do this later. For now, 
I'll just keep all the policy classes completely separate while 
keeping the interface of the constructors and methods the same. 
I'll refactor things later. 

The plan in that case should be to make an abstract class that 
has an abstract method called \texttt{insert\_unvisited\_site}
and three data-fields made from the base-constructor named \texttt{sites}, \texttt{inithorseposn}
and \texttt{phi}. Classes which inherit this abstract base class, will 
add their own local data-members and methods for keeping track of 
data for insertion. 

@D Define various insertion policy classes @{
class PolicyBestInsertionNaive:

    def __init__(self, sites, inithorseposn, phi):

         self.sites           = sites
         self.inithorseposn   = inithorseposn
         self.phi             = phi

         self.visited_sites        = []                # The actual list of visited sites (not indices)
         self.unvisited_sites_idxs = range(len(sites)) # This indexes into self.sites
         self.horse_tour           = [self.inithorseposn]         

    @<Methods for \verb|PolicyBestInsertionNaive| @>
@| self.sites, self.inithorseposn, self.visited_sites, self.horse_tour @}

\newchunk 
@D Methods for \verb|PolicyBestInsertionNaive| @{
def insert_another_unvisited_site(self):
 
     @<  Compute the length of the tour that currently services the visited sites @>    
     delta_increase_least_table = [] # tracking variable updated in for loop below

     for u in self.unvisited_sites_idxs:

         @< Set up tracking variables local to this iteration @>
         @< If \texttt{self.sites[u]} is chosen for insertion, find best insertion position and update \texttt{delta\_increase\_least\_table} @>  
                 
     @< Find the unvisited site which on insertion increases tour-length by the least amount  @>     
     @< Update states for \texttt{PolicyBestInsertionNaive} @> 
 
@| delta_increase_least_table @}


\newchunk 

@D  Compute the length of the tour that currently services the visited sites 
@{current_tour_length    = \
         compute_collinear_horseflies_tour_length(\
                    self.visited_sites,\
                    self.inithorseposn,\
                    self.phi) 
@| current_tour_length @}


\newchunk 
@D Set up tracking variables local to this iteration 
@{ibest                = 0
delta_increase_least = float("inf")
@| ibest, delta_increase_least @}

\newchunk 
@D If \texttt{self.sites[u]} is chosen for insertion, find best insertion position and update \texttt{delta\_increase\_least\_table} @{   
for i in range(len(self.sites)):
                    
            visited_sites_test = self.visited_sites[:i] +\
                                 [ self.sites[u] ]      +\
                                 self.visited_sites[i:]
                                      
            tour_length_on_insertion = \
                       compute_collinear_horseflies_tour_length(\
                                  visited_sites_test,\
                                  self.inithorseposn,\
                                  self.phi) 

            delta_increase = tour_length_on_insertion - current_tour_length                         
            assert(delta_increase >= 0)               

            if delta_increase < delta_increase_least:
                  delta_increase_least = delta_increase
                  ibest                = i                                              
                      
delta_increase_least_table.append({'unvisited_site_idx'      : u    , \
                                   'best_insertion_position' : ibest, \
                                   'delta_increase'          : delta_increase_least})
@| @}



\newchunk 
@D Find the unvisited site which on insertion increases tour-length by the least amount @{
best_table_entry = min(delta_increase_least_table, key = lambda x: x['delta_increase'])
         
unvisited_site_idx_for_insertion = best_table_entry['unvisited_site_idx']
insertion_position               = best_table_entry['best_insertion_position']
delta_increase                   = best_table_entry['delta_increase']
@| @}



\newchunk 
@D Update states for \texttt{PolicyBestInsertionNaive}  @{   
# Update visited and univisted sites info
self.visited_sites = self.visited_sites[:insertion_position]      +\
                     [self.sites[unvisited_site_idx_for_insertion]] +\
                     self.visited_sites[insertion_position:]
  
self.unvisited_sites_idxs = filter( lambda elt: elt != unvisited_site_idx_for_insertion, \
                                    self.unvisited_sites_idxs ) 

# Update the tour of the horse
self.horse_tour = compute_collinear_horseflies_tour(\
                           self.visited_sites,         \
                           self.inithorseposn, \
                           self.phi) 
@| @}

